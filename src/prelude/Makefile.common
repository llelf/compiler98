# This Makefile.common is included from each subdirectory's individual
# Makefile.  We assume the following definitions have already been
# made in the importing Makefile.
#
# THISLIB = e.g. Complex
# SRCS    = all .hs .gc and .c files
# SRCS_T  = all tracing sources
# SEARCH  = e.g. -P../IO -P../PreludeIO
#
# EXTRA_H_FLAGS = e.g. -prelude
# EXTRA_C_FLAGS = e.g. -I../Binary
#
# optionally, to turn off SRC_MAIN(.hs) rules:
# EXCLUDE_THISLIB_HS = yes


OBJDIR   = ${BUILDDIR}/${OBJ}/prelude/${THISLIB}
SRC_MAIN = ${THISLIB}.hs
.SUFFIXES: .hi .hs .o .gc .c .T_hi .T_o .p_o

PART_FLAGS = +CTS -part -redefine -CTS $(SEARCH)
LIB_FLAGS  = +CTS -lib  -redefine -CTS $(SEARCH)


ifeq "T" "${TRACING}"
  HISUFFIX=T_hi
  O=T_o
else
ifeq "p" "${CFG}"
  HISUFFIX=hi
  O=p_o
else
  HISUFFIX=hi
  O=o
endif
endif



ifneq "T" "${TRACING}"

OBJS_HS  = $(patsubst %.hs, ${OBJDIR}/%.$O, $(filter %.hs,${SRCS}))
OBJS_GC  = $(patsubst %.gc, ${OBJDIR}/%.$O, $(filter %.gc,${SRCS}))
OBJS_C   = $(patsubst %.c,  ${OBJDIR}/%.$O, $(filter %.c, ${SRCS}))
ifneq "${EXCLUDE_THISLIB_HS}" "yes"
OBJ_MAIN = $(patsubst %.hs, ${OBJDIR}/%.$O, ${SRC_MAIN})
endif
OBJS = ${OBJS_HS} ${OBJS_GC} ${OBJS_C}

CFILES_HS  = $(patsubst %.hs, %.c, $(filter %.hs, ${SRCS}))
CFILES_GC  = $(patsubst %.gc, %.c, $(filter %.gc, ${SRCS}))
CFILES_XS  = $(patsubst %.gc, %_.c, $(filter %.gc, ${SRCS})) \
             $(patsubst %.gc, %_.hs, $(filter %.gc, ${SRCS}))
ifneq "${EXCLUDE_THISLIB_HS}" "yes"
CFILE_MAIN = $(patsubst %.hs, %.c, ${SRC_MAIN})
endif

CFILES_GEN = ${CFILES_HS} ${CFILES_GC} ${CFILE_MAIN}


all: ${OBJS} extra ${OBJ_MAIN}
extra:
cfiles: extracfiles ${CFILES_GEN}
extracfiles:
fromC:
	$(HC) -c -d $(OBJDIR) $(EXTRA_C_FLAGS) *.c
objdir: ${OBJDIR}
${OBJDIR}:
	mkdir -p ${OBJDIR}
cleanhi:
	-rm -f *.hi
cleanC: cleanExtraC
	-rm -f ${CFILES_GEN} ${CFILES_XS}
clean:	cleanhi cleanC
	-rm -f ${OBJDIR}/*.$O *.$O
	-rm -f $(patsubst %.gc, %_.hs, $(filter %.gc, $(SRCS)))
	-rm -f $(patsubst %.gc, %_.c,  $(filter %.gc, $(SRCS)))
cleanExtraC:

# general build rules for making objects from Haskell files
${OBJS_HS}: ${OBJDIR}/%.$O : %.hs
	$(HC) -c $(PART_FLAGS) $(EXTRA_H_FLAGS) -o $@ $<
${OBJS_GC}: ${OBJDIR}/%.$O : %.gc
	${HC} -c ${PART_FLAGS} $(EXTRA_H_FLAGS) -o $@ $<
ifneq "${EXCLUDE_THISLIB_HS}" "yes"
${OBJ_MAIN}: ${OBJS}
${OBJ_MAIN}: ${OBJDIR}/%.$O : %.hs
	$(HC) -c $(LIB_FLAGS)  $(EXTRA_H_FLAGS) -o $@ $<
endif

# general build rule for making objects from C files
${OBJS_C}: ${OBJDIR}/%.$O : %.c
	$(CC) -c -I$(INCDIR) $(EXTRA_C_FLAGS) -o $@ $<

# general build rules for making C files from Haskell files
${CFILES_HS}: %.c : %.hs
	$(HC) -C $(PART_FLAGS) $(EXTRA_H_FLAGS) $<
${CFILES_GC}: %.c : %.gc
	$(HC) -C $(PART_FLAGS) $(EXTRA_H_FLAGS) $<
ifneq "${EXCLUDE_THISLIB_HS}" "yes"
${CFILE_MAIN}: %.c : %.hs
	$(HC) -C $(LIB_FLAGS)  $(EXTRA_H_FLAGS) $<
endif

# hack to get round mutual recursion between libraries
HIFILES = $(patsubst %.hs,../${THISLIB}/%.${HISUFFIX},$(filter %.hs, ${SRCS}))
${HIFILES}: ../${THISLIB}/%.${HISUFFIX} : %.hs
	$(HC) -c $(PART_FLAGS) -o /dev/null $<


else			#### Tracing


OBJS_HS_T  = $(patsubst %.hs, ${OBJDIR}/%.$O, $(filter %.hs, ${SRCS_T}))
OBJS_GC_T  = $(patsubst %.gc, ${OBJDIR}/%.$O, $(filter %.gc, ${SRCS_T}))
OBJS_HS_NT = $(patsubst %.hs, ${OBJDIR}/%.$O, $(filter %.hs, ${SRCS_NT}))
ifneq "${EXCLUDE_THISLIB_HS}" "yes"
OBJ_MAIN = $(patsubst %.hs, ${OBJDIR}/%.$O, ${SRC_MAIN})
endif
OBJS_T = ${OBJS_HS_T} ${OBJS_GC_T} ${OBJS_HS_NT}

all: ${OBJS_T} extra ${OBJ_MAIN}
extra:
objdir: ${OBJDIR}
${OBJDIR}:
	mkdir -p ${OBJDIR}
install: all
cleanhi:
	-rm -f *.${HISUFFIX}
clean:  cleanhi
	-rm -f ${OBJDIR}/*.$O *.$O

# general build rules for making tracing objects from Haskell/C files
$(OBJS_HS_T): ${OBJDIR}/%.$O: %.hs
	$(TR_COMPILE) -c $(PART_FLAGS) $(EXTRA_H_FLAGS) -o $@ $<
$(OBJS_GC_T): ${OBJDIR}/%.$O: %.gc
	$(TR_COMPILE) -c $(PART_FLAGS) $(EXTRA_H_FLAGS) -o $@ $<
$(OBJS_HS_NT): ${OBJDIR}/%.$O: %.hs
	$(X_COMPILE) -c $(PART_FLAGS) $(EXTRA_H_FLAGS) -o $@ $<
	mv `basename $< .hs`.hi `basename $< .hs`.${HISUFFIX}
ifneq "${EXCLUDE_THISLIB_HS}" "yes"
${OBJ_MAIN}: ${OBJS_T}
${OBJ_MAIN}: ${SRC_MAIN}
	$(TR_COMPILE) -c $(LIB_FLAGS)  $(EXTRA_H_FLAGS) -o $@ $<
endif

# hack to get round mutual recursion between libraries
HIFILES = $(patsubst %.hs,../${THISLIB}/%.${HISUFFIX},$(filter %.hs, ${SRCS}))
${HIFILES}: ../${THISLIB}/%.${HISUFFIX} : %.hs
	$(TR_COMPILE) -c $(PART_FLAGS) $(EXTRA_H_FLAGS) -o /dev/null $<


endif


# The importing Makefile should now define individual dependencies
#    e.g.
# ${OBJDIR}/Function.$O: Function.hs ${OBJDIR}/Other.$O
#
# and C-files dependencies likewise
#    e.g.
# AlignBin.c:    BinHandle.c

