module Main(main) where
import Argv
import GetDep
import Getmodtime(isOld,When,show_When)
import ListUtil(lconcatMap,assocDef,pair)
import Order
import Output
import IO
import System


main =
 getArgs >>= \ args ->
 let
  (zdefs, defs, dflag, ifdebug, ifnotopt, ifopt, isopt,
   goalDir, ignoreHi, pathSrc, pathPrel, modules) = decode args

  keepPrelude = isopt "keepPrelude"

  order' g = (scctsort . map (\(f,(tps,i)) -> (f,i))) g

  build_graph mods =
    dependency unix (zdefs++defs) keepPrelude goalDir ignoreHi []
               ("":pathSrc ++ if keepPrelude then pathPrel else [])
               pathPrel (map stripGoal mods) >>= \nhcgOrg ->
      let src = map fst nhcgOrg
          nhcg = map (\(f,(tpsc,i)) -> (f,(tpsc,filter (`elem` src) i))) nhcgOrg
          cnhcg' =  order' nhcg
          cycles = filter ((1 /=) . length) cnhcg'
          nhcg' = concat cnhcg'
          hsT = hsTimes nhcg nhcg'
          hiT = hiTimes nhcg nhcg'
          graph = makeGraph hsT [] hiT
      in
        return (cycles,graph,nhcg)

  makeGraph []                 hiT' hiT = []
  makeGraph ((hs,(st,ot,p,s,cpp,dep)):hsT) hiT' hiT = 
      if or (map (isOld ot) (st:map (assocDef hiT (undefModule "???")) dep)) then
        ([],(p,hs,s,cpp)): makeGraph hsT (hs:hiT') hiT
      else
        case filter (`elem` hiT') dep of
            [] -> makeGraph hsT hiT' hiT
            xs -> (xs,(p,hs,s,cpp)):makeGraph hsT (hs:hiT') hiT

  hsTimes g m = map (\v-> (v, hsTime (assocDef g (undefModule v) v))) m
     where hsTime (((hsT,_,oT),p,s,cpp),i) = (hsT,oT,p,s,cpp,i)

  hiTimes g m = map (\v-> (v, hiTime (assocDef g (undefModule v) v))) m
     where hiTime (((_,hiT,_),p,s,cpp),i) = hiT

  undefModule m = error ("undefined module "++show m++"\n")
  unix = True	-- formerly (isopt "unix")
  echo = not (isopt "q")

 in
  if null modules then
      hPutStr stderr "Usage: MkProg [-q] [-dobjdir] [-g] [-M] target ...\n"
  else
      build_graph modules >>= \(cycles,build,nhcg)->
      let objcmds = lconcatMap (qCompile echo goalDir dflag defs unix) build
          execmds = lconcatMap (qLink    echo goalDir dflag unix nhcg) modules
      in hPutStr stderr
             (if null cycles then ""
              else "Cycles:\n" ++ lconcatMap ((++ "\n") . show) cycles)
	   >>
         putStr (
           ifdebug "Dependency graph:\n" ++
           ifopt ["g"] (lconcatMap showdep nhcg))
           >>
         putStr (
           ifopt ["M"] ("# dependencies generated by hmake -M:\n" ++
                        lconcatMap (showmake unix "") nhcg))
           >>
         putStr (
           ifopt ["Md"] ("# dependencies generated by hmake -Md:\n" ++
                         "OBJDIR=" ++ goalDir ++ "\n" ++
                         lconcatMap (showmake unix "${OBJDIR}") nhcg))
           >>
         putStr (
           ifdebug "Commands:\n" ++
           ifnotopt ["g", "M", "Md"] (objcmds ++ execmds))
