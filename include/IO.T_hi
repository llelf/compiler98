interface IO where {

{-# NEED #-}
instance Prelude.NmCoerce FFIBuiltin.ForeignObj;

{-# NEED #-}
instance Prelude.NmCoerce (FFIBuiltin.StablePtr a);

{-# NEED #-}
instance Prelude.NmCoerce FFIBuiltin.Addr;

{-# NEED #-}
instance Prelude.NmCoerce PackedString.PackedString;

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Fractional (Ratio.Ratio a);

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Real (Ratio.Ratio a);

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Num (Ratio.Ratio a);

{-# NEED #-}
instance Prelude.Ix SeekMode;

{-# NEED #-}
instance Prelude.Ix IOMode;

{-# NEED #-}
instance Prelude.Bounded SeekMode;

{-# NEED #-}
instance Prelude.Bounded IOMode;

{-# NEED #-}
instance Prelude.Enum FFIBuiltin.Addr;

{-# NEED #-}
instance Prelude.Enum DErrNo.ErrNo;

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Enum (Ratio.Ratio a);

{-# NEED #-}
instance Prelude.Enum SeekMode;

{-# NEED #-}
instance Prelude.Enum IOMode;

{-# NEED #-}
instance Prelude.Ord FFIBuiltin.Addr;

{-# NEED #-}
instance Prelude.Ord PackedString.PackedString;

{-# NEED #-}
instance Prelude.Ord BufferMode;

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Ord (Ratio.Ratio a);

{-# NEED #-}
instance Prelude.Ord SeekMode;

{-# NEED #-}
instance Prelude.Ord IOMode;

{-# NEED #-}
instance Prelude.Eq HandlePosn;

{-# NEED #-}
instance Prelude.Eq FFIBuiltin.Addr;

{-# NEED #-}
instance Prelude.Eq PackedString.PackedString;

{-# NEED #-}
instance Prelude.Eq DErrNo.ErrNo;

{-# NEED #-}
instance Prelude.Eq BufferMode;

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Eq (Ratio.Ratio a);

{-# NEED #-}
instance Prelude.Eq SeekMode;

{-# NEED #-}
instance Prelude.Eq IOMode;

{-# NEED #-}
instance Prelude.Read PackedString.PackedString;

{-# NEED #-}
instance Prelude.Read BufferMode;

{-# NEED #-}
instance (Prelude.Read a,Prelude.Integral a) => Prelude.Read (Ratio.Ratio a);

{-# NEED #-}
instance Prelude.Read SeekMode;

{-# NEED #-}
instance Prelude.Read IOMode;

{-# NEED #-}
instance Prelude.Show FFIBuiltin.Addr;

{-# NEED #-}
instance Prelude.Show PackedString.PackedString;

{-# NEED #-}
instance Prelude.Show DErrNo.ErrNo;

{-# NEED #-}
instance Prelude.Show BufferMode;

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Show (Ratio.Ratio a);

{-# NEED #-}
instance Prelude.Show SeekMode;

{-# NEED #-}
instance Prelude.Show IOMode;
interface FFIBuiltin
{-# NEED ForeignObj #-}
data ForeignObj;

{-# NEED StablePtr #-}
data StablePtr a;

{-# NEED Addr #-}
data Addr;
interface PackedString
{-# NEED PackedString #-}
data PackedString;
interface DErrNo
{-# NEED ErrNo #-}
data ErrNo;
interface ! IO
{-# NEED try #-}
try{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R (Prelude.IO a)) -> (Prelude.R (Prelude.IO (Prelude.Either Prelude.IOError a))))))));

{-# NEED hPrint #-}
hPrint{-# 2 #-}::(Prelude.Show a) => (Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R Handle) -> (Prelude.R (Prelude.Trace -> ((Prelude.R a) -> (Prelude.R (Prelude.IO ()))))))))));

{-# NEED bracket #-}
bracket{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R (Prelude.IO a)) -> (Prelude.R (Prelude.Trace -> ((Prelude.R (Prelude.Trace -> ((Prelude.R a) -> (Prelude.R (Prelude.IO b))))) -> (Prelude.R (Prelude.Trace -> ((Prelude.R (Prelude.Trace -> ((Prelude.R a) -> (Prelude.R (Prelude.IO c))))) -> (Prelude.R (Prelude.IO c)))))))))))));

{-# NEED hWaitForInput #-}
hWaitForInput{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R Handle) -> (Prelude.R (Prelude.Trace -> ((Prelude.R Prelude.Int) -> (Prelude.R (Prelude.IO Prelude.Bool))))))))));

{-# NEED hReady #-}
hReady{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R Handle) -> (Prelude.R (Prelude.IO Prelude.Bool)))))));

{-# NEED hLookAhead #-}
hLookAhead{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R Handle) -> (Prelude.R (Prelude.IO Prelude.Char)))))));

{-# NEED hIsOpen #-}
hIsOpen{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R Handle) -> (Prelude.R (Prelude.IO Prelude.Bool)))))));

{-# NEED hIsClosed #-}
hIsClosed{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R Handle) -> (Prelude.R (Prelude.IO Prelude.Bool)))))));

{-# NEED hIsReadable #-}
hIsReadable{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R Handle) -> (Prelude.R (Prelude.IO Prelude.Bool)))))));

{-# NEED hIsWritable #-}
hIsWritable{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R Handle) -> (Prelude.R (Prelude.IO Prelude.Bool)))))));

{-# NEED hIsSeekable #-}
hIsSeekable{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R Handle) -> (Prelude.R (Prelude.IO Prelude.Bool)))))));

{-# NEED hGetContents #-}
hGetContents{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R Handle) -> (Prelude.R (Prelude.IO Prelude.String)))))));

{-# NEED isAlreadyExistsError #-}
isAlreadyExistsError{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R Prelude.IOError) -> (Prelude.R Prelude.Bool))))));

{-# NEED isDoesNotExistError #-}
isDoesNotExistError{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R Prelude.IOError) -> (Prelude.R Prelude.Bool))))));

{-# NEED isAlreadyInUseError #-}
isAlreadyInUseError{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R Prelude.IOError) -> (Prelude.R Prelude.Bool))))));

{-# NEED isFullError #-}
isFullError{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R Prelude.IOError) -> (Prelude.R Prelude.Bool))))));

{-# NEED isIllegalOperation #-}
isIllegalOperation{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R Prelude.IOError) -> (Prelude.R Prelude.Bool))))));

{-# NEED isPermissionError #-}
isPermissionError{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R Prelude.IOError) -> (Prelude.R Prelude.Bool))))));

{-# NEED hPutStr #-}
hPutStr{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R Handle) -> (Prelude.R (Prelude.Trace -> ((Prelude.R Prelude.String) -> (Prelude.R (Prelude.IO ()))))))))));

{-# NEED isUserError #-}
isUserError{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R Prelude.IOError) -> (Prelude.R Prelude.Bool))))));

{-# NEED isEOFError #-}
isEOFError{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R Prelude.IOError) -> (Prelude.R Prelude.Bool))))));

{-# NEED hPutChar #-}
hPutChar{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R Handle) -> (Prelude.R (Prelude.Trace -> ((Prelude.R Prelude.Char) -> (Prelude.R (Prelude.IO ()))))))))));

{-# NEED hGetChar #-}
hGetChar{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R Handle) -> (Prelude.R (Prelude.IO Prelude.Char)))))));

{-# NEED hSetPosn #-}
hSetPosn{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R Handle) -> (Prelude.R (Prelude.Trace -> ((Prelude.R HandlePosn) -> (Prelude.R (Prelude.IO ()))))))))));

{-# NEED hGetPosn #-}
hGetPosn{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R Handle) -> (Prelude.R (Prelude.IO HandlePosn)))))));

{-# NEED HandlePosn #-}
newtype {-#  #-} HandlePosn;

{-# NEED hPutStrLn #-}
hPutStrLn{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R Handle) -> (Prelude.R (Prelude.Trace -> ((Prelude.R Prelude.String) -> (Prelude.R (Prelude.IO ()))))))))));

{-# NEED hSeek #-}
hSeek{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R Handle) -> (Prelude.R (Prelude.Trace -> ((Prelude.R SeekMode) -> (Prelude.R (Prelude.Trace -> ((Prelude.R Prelude.Integer) -> (Prelude.R (Prelude.IO ())))))))))))));

{-# NEED hFlush #-}
hFlush{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R Handle) -> (Prelude.R (Prelude.IO ())))))));

{-# NEED ioeGetErrorString #-}
ioeGetErrorString{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R Prelude.IOError) -> (Prelude.R Prelude.String))))));

{-# NEED hFileSize #-}
hFileSize{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R Handle) -> (Prelude.R (Prelude.IO Prelude.Integer)))))));

{-# NEED hClose #-}
hClose{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R Handle) -> (Prelude.R (Prelude.IO ())))))));

{-# NEED hGetLine #-}
hGetLine{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R Handle) -> (Prelude.R (Prelude.IO Prelude.String)))))));

{-# NEED ioeGetFileName #-}
ioeGetFileName{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R Prelude.IOError) -> (Prelude.R (Prelude.Maybe Prelude.FilePath)))))));

{-# NEED hGetFileName #-}
hGetFileName{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R Handle) -> (Prelude.R (Prelude.Maybe [Prelude.Char])))))));

{-# NEED openFile #-}
openFile{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R Prelude.FilePath) -> (Prelude.R (Prelude.Trace -> ((Prelude.R IOMode) -> (Prelude.R (Prelude.IO Handle))))))))));

{-# NEED ioeGetHandle #-}
ioeGetHandle{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R Prelude.IOError) -> (Prelude.R (Prelude.Maybe Handle)))))));

{-# NEED {BufferMode NoBuffering LineBuffering BlockBuffering} #-}
data BufferMode
  = NoBuffering 
  | LineBuffering 
  | BlockBuffering (Prelude.R (Prelude.Maybe Prelude.Int));

{-# NEED {SeekMode AbsoluteSeek RelativeSeek SeekFromEnd} #-}
data SeekMode
  = AbsoluteSeek 
  | RelativeSeek 
  | SeekFromEnd ;

{-# NEED {IOMode ReadMode WriteMode AppendMode ReadWriteMode} #-}
data IOMode
  = ReadMode 
  | WriteMode 
  | AppendMode 
  | ReadWriteMode ;

{-# NEED bracket_ #-}
bracket_{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R (Prelude.IO a)) -> (Prelude.R (Prelude.Trace -> ((Prelude.R (Prelude.Trace -> ((Prelude.R a) -> (Prelude.R (Prelude.IO b))))) -> (Prelude.R (Prelude.Trace -> ((Prelude.R (Prelude.IO c)) -> (Prelude.R (Prelude.IO c)))))))))))));

{-# NEED stdin #-}
stdin{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R Handle)));

{-# NEED stdout #-}
stdout{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R Handle)));

{-# NEED stderr #-}
stderr{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R Handle)));

{-# NEED hIsEOF #-}
hIsEOF{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R Handle) -> (Prelude.R (Prelude.IO Prelude.Bool)))))));

{-# NEED Handle #-}
newtype {-#  #-} Handle;

{-# NEED isEOF #-}
isEOF{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.IO Prelude.Bool))));
interface Ratio
{-# NEED Rational #-}
type {-# 1 #-} Rational = (Ratio.Ratio Prelude.Integer);

{-# NEED Ratio #-}
data (Prelude.Integral a) => Ratio a;
}
