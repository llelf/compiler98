interface FFI where {

{-# NEED #-}
instance Storable Prelude.Float;

{-# NEED #-}
instance Storable Prelude.Double;

{-# NEED #-}
instance Storable Prelude.Int;

{-# NEED #-}
instance Storable FFIBuiltin.Addr;

{-# NEED #-}
instance Storable Prelude.Char;

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Fractional (Ratio.Ratio a);

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Real (Ratio.Ratio a);

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Num (Ratio.Ratio a);

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Enum (Ratio.Ratio a);

{-# NEED #-}
instance Prelude.Enum FFIBuiltin.Addr;

{-# NEED #-}
instance Prelude.NmCoerce FFIBuiltin.ForeignObj;

{-# NEED #-}
instance Prelude.NmCoerce FFIBuiltin.Addr;

{-# NEED #-}
instance Prelude.NmCoerce (FFIBuiltin.StablePtr a);

{-# NEED #-}
instance Prelude.NmCoerce PackedString.PackedString;

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Ord (Ratio.Ratio a);

{-# NEED #-}
instance Prelude.Ord FFIBuiltin.Addr;

{-# NEED #-}
instance Prelude.Ord PackedString.PackedString;

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Eq (Ratio.Ratio a);

{-# NEED #-}
instance Prelude.Eq FFIBuiltin.Addr;

{-# NEED #-}
instance Prelude.Eq PackedString.PackedString;

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Show (Ratio.Ratio a);

{-# NEED #-}
instance Prelude.Show FFIBuiltin.Addr;

{-# NEED #-}
instance Prelude.Show PackedString.PackedString;

{-# NEED #-}
instance (Prelude.Read a,Prelude.Integral a) => Prelude.Read (Ratio.Ratio a);

{-# NEED #-}
instance Prelude.Read PackedString.PackedString;
interface FFIBuiltin
{-# NEED StablePtr #-}
data StablePtr a;
interface ! FFI
{-# NEED free #-}
free{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R FFIBuiltin.Addr) -> (Prelude.R (Prelude.IO ())))))));

{-# NEED realloc #-}
realloc{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R FFIBuiltin.Addr) -> (Prelude.R (Prelude.Trace -> ((Prelude.R Prelude.Int) -> (Prelude.R (Prelude.IO FFIBuiltin.Addr))))))))));

{-# NEED mallocElems #-}
mallocElems{-# 2 #-}::(Storable a) => (Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R a) -> (Prelude.R (Prelude.Trace -> ((Prelude.R Prelude.Int) -> (Prelude.R (Prelude.IO FFIBuiltin.Addr))))))))));

{-# NEED mallocElem #-}
mallocElem{-# 2 #-}::(Storable a) => (Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R a) -> (Prelude.R (Prelude.IO FFIBuiltin.Addr)))))));

{-# NEED malloc #-}
malloc{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R Prelude.Int) -> (Prelude.R (Prelude.IO FFIBuiltin.Addr)))))));

{-# NEED {Storable peekElemOff pokeElemOff peekByteOff pokeByteOff peek poke sizeOf alignment} #-}
class Storable a where {
  peekElemOff{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R FFIBuiltin.Addr) -> (Prelude.R (Prelude.Trace -> ((Prelude.R Prelude.Int) -> (Prelude.R (Prelude.IO a))))))))));
  pokeElemOff{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R FFIBuiltin.Addr) -> (Prelude.R (Prelude.Trace -> ((Prelude.R Prelude.Int) -> (Prelude.R (Prelude.Trace -> ((Prelude.R a) -> (Prelude.R (Prelude.IO ())))))))))))));
  peekByteOff{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R FFIBuiltin.Addr) -> (Prelude.R (Prelude.Trace -> ((Prelude.R Prelude.Int) -> (Prelude.R (Prelude.IO a))))))))));
  pokeByteOff{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R FFIBuiltin.Addr) -> (Prelude.R (Prelude.Trace -> ((Prelude.R Prelude.Int) -> (Prelude.R (Prelude.Trace -> ((Prelude.R a) -> (Prelude.R (Prelude.IO ())))))))))))));
  peek{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R FFIBuiltin.Addr) -> (Prelude.R (Prelude.IO a)))))));
  poke{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R FFIBuiltin.Addr) -> (Prelude.R (Prelude.Trace -> ((Prelude.R a) -> (Prelude.R (Prelude.IO ()))))))))));
  sizeOf{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R a) -> (Prelude.R Prelude.Int))))));
  alignment{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R a) -> (Prelude.R Prelude.Int))))));
};

{-# NEED nullAddr #-}
nullAddr{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R FFIBuiltin.Addr)));

{-# NEED plusAddr #-}
plusAddr{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R FFIBuiltin.Addr) -> (Prelude.R (Prelude.Trace -> ((Prelude.R Prelude.Int) -> (Prelude.R FFIBuiltin.Addr)))))))));

{-# NEED makeForeignObj #-}
makeForeignObj{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R FFIBuiltin.Addr) -> (Prelude.R (Prelude.Trace -> ((Prelude.R (Prelude.IO ())) -> (Prelude.R (Prelude.IO FFIBuiltin.ForeignObj))))))))));

{-# NEED foreignObjToAddr #-}
foreignObjToAddr{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R FFIBuiltin.ForeignObj) -> (Prelude.R FFIBuiltin.Addr))))));

{-# NEED withForeignObj #-}
withForeignObj{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R FFIBuiltin.ForeignObj) -> (Prelude.R (Prelude.Trace -> ((Prelude.R (Prelude.Trace -> ((Prelude.R FFIBuiltin.Addr) -> (Prelude.R (Prelude.IO a))))) -> (Prelude.R (Prelude.IO a))))))))));

{-# NEED touchForeignObj #-}
touchForeignObj{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R FFIBuiltin.ForeignObj) -> (Prelude.R (Prelude.IO ())))))));
interface ! FFIBuiltin
{-# NEED ForeignObj #-}
data ForeignObj;

{-# NEED Addr #-}
data Addr;
interface ! CString
{-# NEED CString #-}
type {-# 1 #-} CString = PackedString.PackedString;

{-# NEED toCString #-}
toCString{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R [Prelude.Char]) -> (Prelude.R PackedString.PackedString))))));

{-# NEED fromCString #-}
fromCString{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R PackedString.PackedString) -> (Prelude.R [Prelude.Char]))))));
interface PackedString
{-# NEED PackedString #-}
data PackedString;
interface Ratio
{-# NEED Rational #-}
type {-# 1 #-} Rational = (Ratio.Ratio Prelude.Integer);

{-# NEED Ratio #-}
data (Prelude.Integral a) => Ratio a;
}
