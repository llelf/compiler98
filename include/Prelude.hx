module Prelude
(Var "!!",Has{args=2,fixity=L,priority=9,letBound=True})
(Var "$",Has{args=2,fixity=R,priority=0,letBound=True})
(Var "$!",Has{args=2,fixity=R,priority=0,letBound=True})
(Var "%",Has{args=2,fixity=L,priority=7,letBound=True})
(Var "&&",Has{args=2,fixity=R,priority=3,letBound=True})
(Var "++",Has{args=2,fixity=R,priority=5,letBound=True})
(Var ".",Has{args=2,fixity=R,priority=9,letBound=True})
(Var "=<<",Has{args=2,fixity=R,priority=1,letBound=True})
(Var "^",Has{args=2,fixity=R,priority=8,letBound=True})
(Var "^^",Has{args=2,fixity=R,priority=8,letBound=True})
(Var "_apply1",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "_apply2",Has{args=3,fixity=Def,priority=9,letBound=True})
(Var "_apply3",Has{args=4,fixity=Def,priority=9,letBound=True})
(Var "_apply4",Has{args=5,fixity=Def,priority=9,letBound=True})
(Var "_enumFromThen",Has{args=3,fixity=Def,priority=9,letBound=True})
(Var "_enumFromThenTo",Has{args=3,fixity=Def,priority=9,letBound=True})
(Var "_enumFromTo",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "_enumFromTo'",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "_enumFromToDec",Has{args=3,fixity=Def,priority=9,letBound=True})
(Var "_enumFromToInc",Has{args=3,fixity=Def,priority=9,letBound=True})
(Var "_enumInRange",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "_enumIndex",Has{args=3,fixity=Def,priority=9,letBound=True})
(Var "_enumRange",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "_eqInteger",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "_filter",Has{args=3,fixity=Def,priority=9,letBound=True})
(Var "_foldr",Has{args=3,fixity=Def,priority=9,letBound=True})
(Var "_fromEnum",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "_id",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "_leInteger",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "_mkIOok0",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "_mkIOok1",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "_mkIOok10",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "_mkIOok11",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "_mkIOok12",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "_mkIOok2",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "_mkIOok3",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "_mkIOok4",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "_mkIOok5",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "_mkIOok6",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "_mkIOok7",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "_mkIOok8",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "_mkIOok9",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "_readCon",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "_readCon0",Has{args=3,fixity=Def,priority=9,letBound=True})
(Var "_readConArg",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "_readConInfix",Has{args=6,fixity=Def,priority=9,letBound=True})
(Var "_readField",Has{args=3,fixity=Def,priority=9,letBound=True})
(Var "_readFinal",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "_subInteger",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "_toEnum",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "_tupleIndex",Has{args=4,fixity=Def,priority=9,letBound=True})
(Var "_tupleRange",Has{args=3,fixity=Def,priority=9,letBound=True})
(Var "all",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "and",Has{args=0,fixity=Def,priority=9,letBound=True})
(Var "any",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "appendFile",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "asTypeOf",Has{args=0,fixity=Def,priority=9,letBound=True})
(Var "break",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "catch",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "concat",Has{args=0,fixity=Def,priority=9,letBound=True})
(Var "concatMap",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "const",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "curry",Has{args=3,fixity=Def,priority=9,letBound=True})
(Var "cycle",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "drop",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "dropWhile",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "either",Has{args=3,fixity=Def,priority=9,letBound=True})
(Var "elem",Has{args=1,fixity=None,priority=4,letBound=True})
(Var "error",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "even",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "filter",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "flip",Has{args=3,fixity=Def,priority=9,letBound=True})
(Var "foldl",Has{args=3,fixity=Def,priority=9,letBound=True})
(Var "foldl1",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "foldr",Has{args=3,fixity=Def,priority=9,letBound=True})
(Var "foldr1",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "fromIntegral",Has{args=0,fixity=Def,priority=9,letBound=True})
(Var "fst",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "gcd",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "getChar",Has{args=0,fixity=Def,priority=9,letBound=True})
(Var "getContents",Has{args=0,fixity=Def,priority=9,letBound=True})
(Var "getLine",Has{args=0,fixity=Def,priority=9,letBound=True})
(Var "head",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "id",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "init",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "interact",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "ioError",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "iterate",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "last",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "lcm",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "length",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "lex",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "lines",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "lookup",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "map",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "mapM",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "mapM_",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "maximum",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "maybe",Has{args=3,fixity=Def,priority=9,letBound=True})
(Var "minimum",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "not",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "notElem",Has{args=1,fixity=None,priority=4,letBound=True})
(Var "null",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "numericEnumFrom",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "numericEnumFromThen",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "odd",Has{args=0,fixity=Def,priority=9,letBound=True})
(Var "or",Has{args=0,fixity=Def,priority=9,letBound=True})
(Var "otherwise",Has{args=0,fixity=Def,priority=9,letBound=True})
(Var "print",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "product",Has{args=0,fixity=Def,priority=9,letBound=True})
(Var "putChar",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "putStr",Has{args=0,fixity=Def,priority=9,letBound=True})
(Var "putStrLn",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "read",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "readFile",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "readIO",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "readLn",Has{args=0,fixity=Def,priority=9,letBound=True})
(Var "readParen",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "reads",Has{args=0,fixity=Def,priority=9,letBound=True})
(Var "realToFrac",Has{args=0,fixity=Def,priority=9,letBound=True})
(Var "repeat",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "replicate",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "reverse",Has{args=0,fixity=Def,priority=9,letBound=True})
(Var "scanl",Has{args=3,fixity=Def,priority=9,letBound=True})
(Var "scanl1",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "scanr",Has{args=3,fixity=Def,priority=9,letBound=True})
(Var "scanr1",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "seq",Has{args=2,fixity=R,priority=0,letBound=True})
(Var "sequence",Has{args=0,fixity=Def,priority=9,letBound=True})
(Var "sequence_",Has{args=0,fixity=Def,priority=9,letBound=True})
(Var "showChar",Has{args=0,fixity=Def,priority=9,letBound=True})
(Var "showParen",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "showString",Has{args=0,fixity=Def,priority=9,letBound=True})
(Var "showType",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "shows",Has{args=0,fixity=Def,priority=9,letBound=True})
(Var "snd",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "span",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "splitAt",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "subtract",Has{args=0,fixity=Def,priority=9,letBound=True})
(Var "sum",Has{args=0,fixity=Def,priority=9,letBound=True})
(Var "tail",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "take",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "takeWhile",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "uncurry",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "undefined",Has{args=0,fixity=Def,priority=9,letBound=True})
(Var "unlines",Has{args=0,fixity=Def,priority=9,letBound=True})
(Var "unsafePerformIO",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "until",Has{args=3,fixity=Def,priority=9,letBound=True})
(Var "unwords",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "unzip",Has{args=0,fixity=Def,priority=9,letBound=True})
(Var "unzip3",Has{args=0,fixity=Def,priority=9,letBound=True})
(Var "userError",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "words",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "writeFile",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "zip",Has{args=0,fixity=Def,priority=9,letBound=True})
(Var "zip3",Has{args=0,fixity=Def,priority=9,letBound=True})
(Var "zipWith",Has{args=3,fixity=Def,priority=9,letBound=True})
(Var "zipWith3",Has{args=4,fixity=Def,priority=9,letBound=True})
(Var "||",Has{args=2,fixity=R,priority=2,letBound=True})
(Con "()" "()",Has{args=0,fixity=Def,priority=9,letBound=True})
(Con "Bool" "False",Has{args=0,fixity=Def,priority=9,letBound=True})
(Con "Bool" "True",Has{args=0,fixity=Def,priority=9,letBound=True})
(Con "Either" "Left",Has{args=1,fixity=Def,priority=9,letBound=True})
(Con "Either" "Right",Has{args=1,fixity=Def,priority=9,letBound=True})
(Con "Maybe" "Just",Has{args=1,fixity=Def,priority=9,letBound=True})
(Con "Maybe" "Nothing",Has{args=0,fixity=Def,priority=9,letBound=True})
(Con "Ordering" "EQ",Has{args=0,fixity=Def,priority=9,letBound=True})
(Con "Ordering" "GT",Has{args=0,fixity=Def,priority=9,letBound=True})
(Con "Ordering" "LT",Has{args=0,fixity=Def,priority=9,letBound=True})
(Con "Prelude.10" "Prelude.10",Has{args=10,fixity=Def,priority=9,letBound=True})
(Con "Prelude.11" "Prelude.11",Has{args=11,fixity=Def,priority=9,letBound=True})
(Con "Prelude.12" "Prelude.12",Has{args=12,fixity=Def,priority=9,letBound=True})
(Con "Prelude.13" "Prelude.13",Has{args=13,fixity=Def,priority=9,letBound=True})
(Con "Prelude.14" "Prelude.14",Has{args=14,fixity=Def,priority=9,letBound=True})
(Con "Prelude.15" "Prelude.15",Has{args=15,fixity=Def,priority=9,letBound=True})
(Con "Prelude.2" "Prelude.2",Has{args=2,fixity=Def,priority=9,letBound=True})
(Con "Prelude.3" "Prelude.3",Has{args=3,fixity=Def,priority=9,letBound=True})
(Con "Prelude.4" "Prelude.4",Has{args=4,fixity=Def,priority=9,letBound=True})
(Con "Prelude.5" "Prelude.5",Has{args=5,fixity=Def,priority=9,letBound=True})
(Con "Prelude.6" "Prelude.6",Has{args=6,fixity=Def,priority=9,letBound=True})
(Con "Prelude.7" "Prelude.7",Has{args=7,fixity=Def,priority=9,letBound=True})
(Con "Prelude.8" "Prelude.8",Has{args=8,fixity=Def,priority=9,letBound=True})
(Con "Prelude.9" "Prelude.9",Has{args=9,fixity=Def,priority=9,letBound=True})
(Con "Prelude.[]" ":",Has{args=2,fixity=R,priority=5,letBound=True})
(Con "Prelude.[]" "Prelude.[]",Has{args=0,fixity=Def,priority=9,letBound=True})
(Method "Bounded" "maxBound",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "Bounded" "minBound",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "Enum" "enumFrom",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "Enum" "enumFromThen",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "Enum" "enumFromThenTo",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "Enum" "enumFromTo",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "Enum" "fromEnum",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "Enum" "pred",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "Enum" "succ",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "Enum" "toEnum",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "Eq" "/=",Has{args=(-1),fixity=None,priority=4,letBound=True})
(Method "Eq" "==",Has{args=(-1),fixity=None,priority=4,letBound=True})
(Method "Floating" "**",Has{args=(-1),fixity=R,priority=8,letBound=True})
(Method "Floating" "acos",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "Floating" "acosh",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "Floating" "asin",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "Floating" "asinh",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "Floating" "atan",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "Floating" "atanh",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "Floating" "cos",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "Floating" "cosh",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "Floating" "exp",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "Floating" "log",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "Floating" "logBase",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "Floating" "pi",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "Floating" "sin",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "Floating" "sinh",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "Floating" "sqrt",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "Floating" "tan",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "Floating" "tanh",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "Fractional" "/",Has{args=(-1),fixity=L,priority=7,letBound=True})
(Method "Fractional" "fromRational",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "Fractional" "recip",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "Functor" "fmap",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "Integral" "div",Has{args=(-1),fixity=L,priority=7,letBound=True})
(Method "Integral" "divMod",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "Integral" "mod",Has{args=(-1),fixity=L,priority=7,letBound=True})
(Method "Integral" "quot",Has{args=(-1),fixity=L,priority=7,letBound=True})
(Method "Integral" "quotRem",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "Integral" "rem",Has{args=(-1),fixity=L,priority=7,letBound=True})
(Method "Integral" "toInteger",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "Ix" "inRange",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "Ix" "index",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "Ix" "range",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "Ix" "rangeSize",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "Monad" ">>",Has{args=(-1),fixity=L,priority=1,letBound=True})
(Method "Monad" ">>=",Has{args=(-1),fixity=L,priority=1,letBound=True})
(Method "Monad" "fail",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "Monad" "return",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "Num" "*",Has{args=(-1),fixity=L,priority=7,letBound=True})
(Method "Num" "+",Has{args=(-1),fixity=L,priority=6,letBound=True})
(Method "Num" "-",Has{args=(-1),fixity=L,priority=6,letBound=True})
(Method "Num" "abs",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "Num" "fromInteger",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "Num" "negate",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "Num" "signum",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "Ord" "<",Has{args=(-1),fixity=None,priority=4,letBound=True})
(Method "Ord" "<=",Has{args=(-1),fixity=None,priority=4,letBound=True})
(Method "Ord" ">",Has{args=(-1),fixity=None,priority=4,letBound=True})
(Method "Ord" ">=",Has{args=(-1),fixity=None,priority=4,letBound=True})
(Method "Ord" "compare",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "Ord" "max",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "Ord" "min",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "Read" "readList",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "Read" "readsPrec",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "Real" "toRational",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "RealFloat" "atan2",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "RealFloat" "decodeFloat",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "RealFloat" "encodeFloat",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "RealFloat" "exponent",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "RealFloat" "floatDigits",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "RealFloat" "floatRadix",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "RealFloat" "floatRange",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "RealFloat" "isDenormalized",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "RealFloat" "isIEEE",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "RealFloat" "isInfinite",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "RealFloat" "isNaN",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "RealFloat" "isNegativeZero",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "RealFloat" "scaleFloat",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "RealFloat" "significand",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "RealFrac" "ceiling",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "RealFrac" "floor",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "RealFrac" "properFraction",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "RealFrac" "round",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "RealFrac" "truncate",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "Show" "show",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "Show" "showList",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "Show" "showsPrec",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "Show" "showsType",Has{args=(-1),fixity=Def,priority=9,letBound=True})
