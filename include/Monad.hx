module Monad
(Var "=<<",Has{args=2,fixity=R,priority=1,letBound=True})
(Var "ap",Has{args=0,fixity=Def,priority=9,letBound=True})
(Var "filterM",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "foldM",Has{args=3,fixity=Def,priority=9,letBound=True})
(Var "guard",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "join",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "liftM",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "liftM2",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "liftM3",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "liftM4",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "liftM5",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "mapAndUnzipM",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "mapM",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "mapM_",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "msum",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "sequence",Has{args=0,fixity=Def,priority=9,letBound=True})
(Var "sequence_",Has{args=0,fixity=Def,priority=9,letBound=True})
(Var "unless",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "when",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "zipWithM",Has{args=3,fixity=Def,priority=9,letBound=True})
(Var "zipWithM_",Has{args=3,fixity=Def,priority=9,letBound=True})
(Method "MonadPlus" "mplus",Has{args=(-1),fixity=Def,priority=9,letBound=True})
(Method "MonadPlus" "mzero",Has{args=(-1),fixity=Def,priority=9,letBound=True})
