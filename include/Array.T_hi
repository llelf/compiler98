interface Array where {
infixl  9 !;
infixl  9 //;

{-# NEED #-}
instance Prelude.NmCoerce (FFIBuiltin.StablePtr a);

{-# NEED #-}
instance Prelude.NmCoerce FFIBuiltin.ForeignObj;

{-# NEED #-}
instance Prelude.NmCoerce PackedString.PackedString;

{-# NEED #-}
instance Prelude.NmCoerce FFIBuiltin.Addr;

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Fractional (Ratio.Ratio a);

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Real (Ratio.Ratio a);

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Num (Ratio.Ratio a);

{-# NEED #-}
instance Prelude.Enum FFIBuiltin.Addr;

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Enum (Ratio.Ratio a);

{-# NEED #-}
instance (Prelude.Ix a) => Prelude.Functor (Array a);

{-# NEED #-}
instance Prelude.Ord PackedString.PackedString;

{-# NEED #-}
instance Prelude.Ord FFIBuiltin.Addr;

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Ord (Ratio.Ratio a);

{-# NEED #-}
instance (Prelude.Ix a,Prelude.Ord b) => Prelude.Ord (Array a b);

{-# NEED #-}
instance Prelude.Eq PackedString.PackedString;

{-# NEED #-}
instance Prelude.Eq FFIBuiltin.Addr;

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Eq (Ratio.Ratio a);

{-# NEED #-}
instance (Prelude.Ix a,Prelude.Eq b) => Prelude.Eq (Array a b);

{-# NEED #-}
instance Prelude.Read PackedString.PackedString;

{-# NEED #-}
instance (Prelude.Read a,Prelude.Integral a) => Prelude.Read (Ratio.Ratio a);

{-# NEED #-}
instance (Prelude.Ix a,Prelude.Read a,Prelude.Read b) => Prelude.Read (Array a b);

{-# NEED #-}
instance Prelude.Show PackedString.PackedString;

{-# NEED #-}
instance Prelude.Show FFIBuiltin.Addr;

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Show (Ratio.Ratio a);

{-# NEED #-}
instance (Prelude.Ix a,Prelude.Show a,Prelude.Show b) => Prelude.Show (Array a b);
interface FFIBuiltin
{-# NEED StablePtr #-}
data StablePtr a;

{-# NEED ForeignObj #-}
data ForeignObj;
interface PackedString
{-# NEED PackedString #-}
data PackedString;
interface FFIBuiltin
{-# NEED Addr #-}
data Addr;
interface ! Array
{-# NEED listArray #-}
listArray{-# 2 #-}::(Prelude.Ix a) => (Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R (a,a)) -> (Prelude.R (Prelude.Trace -> ((Prelude.R [b]) -> (Prelude.R (Array a b))))))))));

{-# NEED accumArray #-}
accumArray{-# 2 #-}::(Prelude.Ix c) => (Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R (Prelude.Trace -> ((Prelude.R a) -> (Prelude.R (Prelude.Trace -> ((Prelude.R b) -> (Prelude.R a))))))) -> (Prelude.R (Prelude.Trace -> ((Prelude.R a) -> (Prelude.R (Prelude.Trace -> ((Prelude.R (c,c)) -> (Prelude.R (Prelude.Trace -> ((Prelude.R [(c,b)]) -> (Prelude.R (Array c a))))))))))))))));

{-# NEED (!) #-}
(!){-# 2 #-}::(Prelude.Ix a) => (Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R (Array a b)) -> (Prelude.R (Prelude.Trace -> ((Prelude.R a) -> (Prelude.R b)))))))));
interface ! Ix
{-# NEED rangeSize #-}
rangeSize{-# 2 #-}::(Prelude.Ix a) => (Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R (a,a)) -> (Prelude.R Prelude.Int))))));
interface ! Array
{-# NEED elems #-}
elems{-# 2 #-}::(Prelude.Ix a) => (Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R (Array a b)) -> (Prelude.R [b]))))));

{-# NEED indices #-}
indices{-# 2 #-}::(Prelude.Ix a) => (Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R (Array a b)) -> (Prelude.R [a]))))));

{-# NEED bounds #-}
bounds{-# 2 #-}::(Prelude.Ix a) => (Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R (Array a b)) -> (Prelude.R (a,a)))))));

{-# NEED assocs #-}
assocs{-# 2 #-}::(Prelude.Ix a) => (Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R (Array a b)) -> (Prelude.R [(a,b)]))))));

{-# NEED ixmap #-}
ixmap{-# 2 #-}::(Prelude.Ix a,Prelude.Ix b) => (Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R (a,a)) -> (Prelude.R (Prelude.Trace -> ((Prelude.R (Prelude.Trace -> ((Prelude.R a) -> (Prelude.R b)))) -> (Prelude.R (Prelude.Trace -> ((Prelude.R (Array b c)) -> (Prelude.R (Array a c)))))))))))));

{-# NEED array #-}
array{-# 2 #-}::(Prelude.Ix a) => (Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R (a,a)) -> (Prelude.R (Prelude.Trace -> ((Prelude.R [(a,b)]) -> (Prelude.R (Array a b))))))))));

{-# NEED accum #-}
accum{-# 2 #-}::(Prelude.Ix c) => (Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R (Prelude.Trace -> ((Prelude.R a) -> (Prelude.R (Prelude.Trace -> ((Prelude.R b) -> (Prelude.R a))))))) -> (Prelude.R (Prelude.Trace -> ((Prelude.R (Array c a)) -> (Prelude.R (Prelude.Trace -> ((Prelude.R [(c,b)]) -> (Prelude.R (Array c a)))))))))))));

{-# NEED (//) #-}
(//){-# 2 #-}::(Prelude.Ix a) => (Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R (Array a b)) -> (Prelude.R (Prelude.Trace -> ((Prelude.R [(a,b)]) -> (Prelude.R (Array a b))))))))));

{-# NEED Array #-}
data (Prelude.Ix a) => Array a b;
interface ! Prelude
{-# NEED {Ix range index inRange} #-}
class (Prelude.Ord a) => Ix a where {
  range{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R (a,a)) -> (Prelude.R [a]))))));
  index{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R (a,a)) -> (Prelude.R (Prelude.Trace -> ((Prelude.R a) -> (Prelude.R Prelude.Int)))))))));
  inRange{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R (a,a)) -> (Prelude.R (Prelude.Trace -> ((Prelude.R a) -> (Prelude.R Prelude.Bool)))))))));
};
interface Ratio
{-# NEED Rational #-}
type {-# 1 #-} Rational = (Ratio.Ratio Prelude.Integer);

{-# NEED Ratio #-}
data (Prelude.Integral a) => Ratio a;
}
