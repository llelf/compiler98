interface Prelude where {
infix   4 `elem`;
infix   4 `notElem`;
infixl  9 !!;
infixl  7 Ratio.%;
infixr  0 $!;
infixr  0 $;
infixr  2 ||;
infixr  0 `seq`;
infixr  5 ++;
infixr  9 .;
infixr  3 &&;
infixr  8 **;
infixr  8 ^^;
infixr  8 ^;
infixl  7 /;
infixl  1 >>=;
infixl  1 >>;
infixr  1 =<<;
infix   4 /=;
infix   4 ==;
infix   4 <=;
infix   4 <;
infix   4 >=;
infix   4 >;
infixr  5 :;
prefix negate 6 -;
infixl  6 +;
infixl  7 *;
infixl  7 `div`;
infixl  7 `mod`;
infixl  7 `quot`;
infixl  7 `rem`;

{-# NEED #-}
instance Floating Float;

{-# NEED #-}
instance Floating Double;

{-# NEED #-}
instance RealFloat Float;

{-# NEED #-}
instance RealFloat Double;

{-# NEED #-}
instance (Integral a) => Fractional (Ratio.Ratio a);

{-# NEED #-}
instance Fractional Float;

{-# NEED #-}
instance Fractional Double;

{-# NEED #-}
instance (Integral a) => RealFrac (Ratio.Ratio a);

{-# NEED #-}
instance RealFrac Float;

{-# NEED #-}
instance RealFrac Double;

{-# NEED #-}
instance Bounded Bool;

{-# NEED #-}
instance Bounded Int;

{-# NEED #-}
instance Bounded Char;

{-# NEED #-}
instance Bounded ();

{-# NEED #-}
instance (Bounded a,Bounded b,Bounded c) => Bounded (a,b,c);

{-# NEED #-}
instance (Bounded a,Bounded b) => Bounded (a,b);

{-# NEED #-}
instance Bounded Ordering;

{-# NEED #-}
instance Integral Int;

{-# NEED #-}
instance Integral Integer;

{-# NEED #-}
instance Real Int;

{-# NEED #-}
instance Real Integer;

{-# NEED #-}
instance (Integral a) => Real (Ratio.Ratio a);

{-# NEED #-}
instance Real Float;

{-# NEED #-}
instance Real Double;

{-# NEED #-}
instance Num Int;

{-# NEED #-}
instance Num Integer;

{-# NEED #-}
instance (Integral a) => Num (Ratio.Ratio a);

{-# NEED #-}
instance Num Float;

{-# NEED #-}
instance Num Double;

{-# NEED #-}
instance Functor Maybe;

{-# NEED #-}
instance Functor IO;

{-# NEED #-}
instance Functor [];

{-# NEED #-}
instance Monad Maybe;

{-# NEED #-}
instance Monad IO;

{-# NEED #-}
instance Monad [];

{-# NEED #-}
instance Enum Bool;

{-# NEED #-}
instance Enum Int;

{-# NEED #-}
instance Enum Char;

{-# NEED #-}
instance Enum Integer;

{-# NEED #-}
instance (Integral a) => Enum (Ratio.Ratio a);

{-# NEED #-}
instance Enum Float;

{-# NEED #-}
instance Enum Double;

{-# NEED #-}
instance Enum ();

{-# NEED #-}
instance Enum Ordering;

{-# NEED #-}
instance (Ord a,Ord b) => Ord (Either a b);

{-# NEED #-}
instance (Ord a) => Ord (Maybe a);

{-# NEED #-}
instance Ord Bool;

{-# NEED #-}
instance Ord Int;

{-# NEED #-}
instance Ord Char;

{-# NEED #-}
instance Ord Integer;

{-# NEED #-}
instance (Integral a) => Ord (Ratio.Ratio a);

{-# NEED #-}
instance Ord Float;

{-# NEED #-}
instance Ord Double;

{-# NEED #-}
instance (Ord a) => Ord (R a);

{-# NEED #-}
instance Ord ();

{-# NEED #-}
instance (Ord a,Ord b,Ord c,Ord d) => Ord (a,b,c,d);

{-# NEED #-}
instance (Ord a,Ord b,Ord c) => Ord (a,b,c);

{-# NEED #-}
instance (Ord a) => Ord [a];

{-# NEED #-}
instance (Ord a,Ord b) => Ord (a,b);

{-# NEED #-}
instance Ord Ordering;

{-# NEED #-}
instance Eq IOError;

{-# NEED #-}
instance (Eq a,Eq b) => Eq (Either a b);

{-# NEED #-}
instance (Eq a) => Eq (Maybe a);

{-# NEED #-}
instance Eq Bool;

{-# NEED #-}
instance Eq Int;

{-# NEED #-}
instance Eq Char;

{-# NEED #-}
instance Eq Integer;

{-# NEED #-}
instance (Integral a) => Eq (Ratio.Ratio a);

{-# NEED #-}
instance Eq Float;

{-# NEED #-}
instance Eq Double;

{-# NEED #-}
instance (Eq a) => Eq (R a);

{-# NEED #-}
instance Eq ();

{-# NEED #-}
instance (Eq a,Eq b,Eq c,Eq d) => Eq (a,b,c,d);

{-# NEED #-}
instance (Eq a,Eq b,Eq c) => Eq (a,b,c);

{-# NEED #-}
instance (Eq a) => Eq [a];

{-# NEED #-}
instance (Eq a,Eq b) => Eq (a,b);

{-# NEED #-}
instance Eq Ordering;

{-# NEED #-}
instance Show IOError;

{-# NEED #-}
instance (Show a,Show b) => Show (Either a b);

{-# NEED #-}
instance (Show a) => Show (Maybe a);

{-# NEED #-}
instance Show Bool;

{-# NEED #-}
instance Show Int;

{-# NEED #-}
instance Show Char;

{-# NEED #-}
instance Show Integer;

{-# NEED #-}
instance (Integral a) => Show (Ratio.Ratio a);

{-# NEED #-}
instance Show Float;

{-# NEED #-}
instance Show Double;

{-# NEED #-}
instance (Show a) => Show (R a);

{-# NEED #-}
instance (Show a,Show b) => Show (a -> b);

{-# NEED #-}
instance (Show a) => Show (IO a);

{-# NEED #-}
instance Show ();

{-# NEED #-}
instance (Show a,Show b,Show c,Show d) => Show (a,b,c,d);

{-# NEED #-}
instance (Show a,Show b,Show c,Show d,Show e) => Show (a,b,c,d,e);

{-# NEED #-}
instance (Show a,Show b,Show c) => Show (a,b,c);

{-# NEED #-}
instance (Show a) => Show [a];

{-# NEED #-}
instance (Show a,Show b) => Show (a,b);

{-# NEED #-}
instance Show Ordering;

{-# NEED #-}
instance (Read a,Read b) => Read (Either a b);

{-# NEED #-}
instance (Read a) => Read (Maybe a);

{-# NEED #-}
instance Read Bool;

{-# NEED #-}
instance Read Int;

{-# NEED #-}
instance Read Char;

{-# NEED #-}
instance Read Integer;

{-# NEED #-}
instance (Read a,Integral a) => Read (Ratio.Ratio a);

{-# NEED #-}
instance Read Float;

{-# NEED #-}
instance Read Double;

{-# NEED #-}
instance Read ();

{-# NEED #-}
instance (Read a,Read b,Read c,Read d) => Read (a,b,c,d);

{-# NEED #-}
instance (Read a,Read b,Read c,Read d,Read e) => Read (a,b,c,d,e);

{-# NEED #-}
instance (Read a,Read b,Read c) => Read (a,b,c);

{-# NEED #-}
instance (Read a) => Read [a];

{-# NEED #-}
instance (Read a,Read b) => Read (a,b);

{-# NEED #-}
instance Read Ordering;

{-# NEED #-}
instance NmCoerce ();

{-# NEED #-}
instance NmCoerce Char;

{-# NEED #-}
instance NmCoerce Int;

{-# NEED #-}
instance NmCoerce Bool;

{-# NEED #-}
instance NmCoerce Double;

{-# NEED #-}
instance NmCoerce Float;

{-# NEED #-}
instance NmCoerce Integer;

{-# NEED #-}
instance NmCoerce (Either a b);

{-# NEED #-}
instance NmCoerce (FFIBuiltin.StablePtr a);

{-# NEED #-}
instance NmCoerce FFIBuiltin.Addr;

{-# NEED #-}
instance NmCoerce FFIBuiltin.ForeignObj;

{-# NEED #-}
instance NmCoerce (Vector a);

{-# NEED #-}
instance NmCoerce PackedString.PackedString;
interface PackedString
{-# NEED PackedString #-}
data PackedString;
interface ! Prelude
{-# NEED {Bounded minBound maxBound} #-}
class Bounded a where {
  minBound{-# 2 #-}::(SR -> (Trace -> (R a)));
  maxBound{-# 2 #-}::(SR -> (Trace -> (R a)));
};

{-# NEED {Ix range index inRange} #-}
class (Ord a) => Ix a where {
  range{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (a,a)) -> (R [a]))))));
  index{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (a,a)) -> (R (Trace -> ((R a) -> (R Int)))))))));
  inRange{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (a,a)) -> (R (Trace -> ((R a) -> (R Bool)))))))));
};

{-# NEED {NmCoerce toNm} #-}
class NmCoerce a where {
  toNm{-# 3 #-}::(Trace -> (a -> (SR -> Trace)));
};

{-# NEED _tupleRange #-}
_tupleRange{-# 2 #-}::(Ix a) => (SR -> (Trace -> (R (Trace -> ((R a) -> (R (Trace -> ((R a) -> (R (Trace -> ((R [(Trace -> ((R a) -> (R b)))]) -> (R [b]))))))))))));

{-# NEED _tupleIndex #-}
_tupleIndex{-# 2 #-}::(Ix a) => (SR -> (Trace -> (R (Trace -> ((R a) -> (R (Trace -> ((R a) -> (R (Trace -> ((R a) -> (R (Trace -> ((R Int) -> (R Int)))))))))))))));

{-# NEED readParen #-}
readParen{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R Bool) -> (R (Trace -> ((R (Trace -> ((R String) -> (R [(a,String)])))) -> (R (Trace -> ((R String) -> (R [(a,String)]))))))))))));

{-# NEED reads #-}
reads{-# 2 #-}::(Read a) => (SR -> (Trace -> (R (Trace -> ((R String) -> (R
[(a,String)]))))));

{-# NEED _readField #-}
_readField{-# 2 #-}::(Read a) => (SR -> (Trace -> (R (Trace -> ((R String) -> (R (Trace -> ((R String) -> (R (Trace -> ((R (Trace -> ((R String) -> (R [((Trace -> ((R a) -> (R b))),String)])))) -> (R (Trace -> ((R String) -> (R [(b,String)])))))))))))))));

{-# NEED _readFinal #-}
_readFinal{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R String) -> (R (Trace -> ((R (Trace -> ((R a) -> (R [(b,String)])))) -> (R (Trace -> ((R a) -> (R [(b,String)]))))))))))));

{-# NEED _readCon0 #-}
_readCon0{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R Bool) -> (R (Trace -> ((R a) -> (R (Trace -> ((R String) -> (R (Trace -> ((R String) -> (R [(a,String)])))))))))))))));

{-# NEED _readConArg #-}
_readConArg{-# 2 #-}::(Read a) => (SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R String) -> (R [((Trace -> ((R a) -> (R b))),String)])))) -> (R (Trace -> ((R String) -> (R [(b,String)])))))))));

{-# NEED _readCon #-}
_readCon{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R (Trace -> ((R String) -> (R (Trace -> ((R String) -> (R [(a,String)]))))))))))));

{-# NEED _readConInfix #-}
_readConInfix{-# 2 #-}::(Read a,Read b) => (SR -> (Trace -> (R (Trace -> ((R Int) -> (R (Trace -> ((R Int) -> (R (Trace -> ((R Int) -> (R (Trace -> ((R Int) -> (R (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R c))))))) -> (R (Trace -> ((R String) -> (R (Trace -> ((R String) -> (R [(c,String)]))))))))))))))))))))))));

{-# NEED (^) #-}
(^){-# 2 #-}::(Num a,Integral b) => (SR -> (Trace -> (R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R a)))))))));

{-# NEED (^^) #-}
(^^){-# 2 #-}::(Fractional a,Integral b) => (SR -> (Trace -> (R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R a)))))))));

{-# NEED _enumIndex #-}
_enumIndex{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R String) -> (R (Trace -> ((R (a,a)) -> (R (Trace -> ((R a) -> (R Int))))))))))));

{-# NEED _enumFromThenTo #-}
_enumFromThenTo{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R (Trace -> ((R a) -> (R (Trace -> ((R Int) -> (R [a]))))))))))));

{-# NEED _enumFromTo #-}
_enumFromTo{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R (Trace -> ((R Int) -> (R [a])))))))));

{-# NEED _enumFromTo' #-}
_enumFromTo'{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R Int) -> (R (Trace -> ((R Int) -> (R [a])))))))));

{-# NEED _enumInRange #-}
_enumInRange{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (a,a)) -> (R (Trace -> ((R a) -> (R Bool)))))))));

{-# NEED _enumRange #-}
_enumRange{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (a,a)) -> (R [a]))))));

{-# NEED _enumFromToDec #-}
_enumFromToDec{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R Int) -> (R (Trace -> ((R Int) -> (R (Trace -> ((R Int) -> (R [a]))))))))))));

{-# NEED numericEnumFromThen #-}
numericEnumFromThen{-# 2 #-}::(Real a) => (SR -> (Trace -> (R (Trace -> ((R a) -> (R (Trace -> ((R a) -> (R [a])))))))));

{-# NEED numericEnumFrom #-}
numericEnumFrom{-# 2 #-}::(Real a) => (SR -> (Trace -> (R (Trace -> ((R a) -> (R [a]))))));

{-# NEED _enumFromThen #-}
_enumFromThen{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R (Trace -> ((R a) -> (R (Trace -> ((R Int) -> (R [a]))))))))))));

{-# NEED _toEnum #-}
_toEnum{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R Int) -> (R a))))));

{-# NEED _tprim_ToEnum #-}
_tprim_ToEnum{-# 2 #-}::(Trace -> ((R Int) -> (R a)));

{-# NEED realToFrac #-}
realToFrac{-# 2 #-}::(Real a,Fractional b) => (SR -> (Trace -> (R (Trace -> ((R a) -> (R b))))));

{-# NEED _leInteger #-}
_leInteger{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R Integer) -> (R (Trace -> ((R Integer) -> (R Bool)))))))));

{-# NEED _subInteger #-}
_subInteger{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R Integer) -> (R (Trace -> ((R Integer) -> (R Integer)))))))));

{-# NEED product #-}
product{-# 2 #-}::(Num a) => (SR -> (Trace -> (R (Trace -> ((R [a]) -> (R a))))));

{-# NEED sum #-}
sum{-# 2 #-}::(Num a) => (SR -> (Trace -> (R (Trace -> ((R [a]) -> (R a))))));
interface ! Ratio
{-# NEED (%) #-}
(%){-# 2 #-}::(Integral a) => (SR -> (Trace -> (R (Trace -> ((R a) -> (R (Trace -> ((R a) -> (R (Ratio.Ratio a))))))))));
interface ! Prelude
{-# NEED uncurry #-}
uncurry{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R c))))))) -> (R (Trace -> ((R (a,b)) -> (R c)))))))));

{-# NEED curry #-}
curry{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R (a,b)) -> (R c)))) -> (R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R c))))))))))));

{-# NEED showString #-}
showString{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R String) -> (R ShowS))))));

{-# NEED showParen #-}
showParen{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R Bool) -> (R (Trace -> ((R ShowS) -> (R ShowS)))))))));

{-# NEED showChar #-}
showChar{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R Char) -> (R ShowS))))));

{-# NEED shows #-}
shows{-# 2 #-}::(Show a) => (SR -> (Trace -> (R (Trace -> ((R a) -> (R ShowS))))));

{-# NEED const #-}
const{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R a)))))))));

{-# NEED foldl1 #-}
foldl1{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R a) -> (R a))))))) -> (R (Trace -> ((R [a]) -> (R a)))))))));

{-# NEED foldr1 #-}
foldr1{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R a) -> (R a))))))) -> (R (Trace -> ((R [a]) -> (R a)))))))));

{-# NEED scanl1 #-}
scanl1{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R a) -> (R a))))))) -> (R (Trace -> ((R [a]) -> (R [a])))))))));

{-# NEED scanr1 #-}
scanr1{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R a) -> (R a))))))) -> (R (Trace -> ((R [a]) -> (R [a]))))))))); 

{-# NEED zipWith3 #-}
zipWith3{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R d)))))))))) -> (R (Trace -> ((R [a]) -> (R (Trace -> ((R [b]) -> (R (Trace -> ((R [c]) -> (R [d])))))))))))))));

{-# NEED zip3 #-}
zip3{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R [a]) -> (R (Trace -> ((R [b]) -> (R (Trace -> ((R [c]) -> (R [(a,b,c)]))))))))))));

{-# NEED unzip3 #-}
unzip3{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R [(a,b,c)]) -> (R ([a],[b],[c])))))));

{-# NEED head #-}
head{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R [a]) -> (R a))))));

{-# NEED and #-}
and{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R [Bool]) -> (R Bool))))));

{-# NEED (++) #-}
(++){-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R [a]) -> (R (Trace -> ((R [a]) -> (R [a])))))))));

{-# NEED cycle #-}
cycle{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R [a]) -> (R [a]))))));

{-# NEED take #-}
take{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R Int) -> (R (Trace -> ((R [a]) -> (R [a])))))))));

{-# NEED takeWhile #-}
takeWhile{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R Bool)))) -> (R (Trace -> ((R [a]) -> (R [a])))))))));

{-# NEED dropWhile #-}
dropWhile{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R Bool)))) -> (R (Trace -> ((R [a]) -> (R [a])))))))));

{-# NEED reverse #-}
reverse{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R [a]) -> (R [a]))))));

{-# NEED replicate #-}
replicate{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R Int) -> (R (Trace -> ((R a) -> (R [a])))))))));

{-# NEED iterate #-}
iterate{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R a)))) -> (R (Trace -> ((R a) -> (R [a])))))))));

{-# NEED length #-}
length{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R [a]) -> (R Int))))));

{-# NEED zipWith #-}
zipWith{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R c))))))) -> (R (Trace -> ((R [a]) -> (R (Trace -> ((R [b]) -> (R [c]))))))))))));

{-# NEED break #-}
break{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R Bool)))) -> (R (Trace -> ((R [a]) -> (R ([a],[a]))))))))));

{-# NEED foldl #-}
foldl{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R a))))))) -> (R (Trace -> ((R a) -> (R (Trace -> ((R [b]) -> (R a))))))))))));

{-# NEED scanl #-}
scanl{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R a))))))) -> (R (Trace -> ((R a) -> (R (Trace -> ((R [b]) -> (R [a])))))))))))); 

{-# NEED tail #-}
tail{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R [a]) -> (R [a]))))));

{-# NEED all #-}
all{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R Bool)))) -> (R (Trace -> ((R [a]) -> (R Bool)))))))));

{-# NEED null #-}
null{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R [a]) -> (R Bool))))));

{-# NEED elem #-}
elem{-# 2 #-}::(Eq a) => (SR -> (Trace -> (R (Trace -> ((R a) -> (R (Trace -> ((R [a]) -> (R Bool)))))))));

{-# NEED notElem #-}
notElem{-# 2 #-}::(Eq a) => (SR -> (Trace -> (R (Trace -> ((R a) -> (R (Trace -> ((R [a]) -> (R Bool)))))))));

{-# NEED maximum #-}
maximum{-# 2 #-}::(Ord a) => (SR -> (Trace -> (R (Trace -> ((R [a]) -> (R a))))));

{-# NEED minimum #-}
minimum{-# 2 #-}::(Ord a) => (SR -> (Trace -> (R (Trace -> ((R [a]) -> (R a))))));

{-# NEED span #-}
span{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R Bool)))) -> (R (Trace -> ((R [a]) -> (R ([a],[a]))))))))));

{-# NEED map #-}
map{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R b)))) -> (R (Trace -> ((R [a]) -> (R [b])))))))));

{-# NEED concatMap #-}
concatMap{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R [b])))) -> (R (Trace -> ((R [a]) -> (R [b])))))))));

{-# NEED zip #-}
zip{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R [a]) -> (R (Trace -> ((R [b]) -> (R [(a,b)])))))))));

{-# NEED unzip #-}
unzip{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R [(a,b)]) -> (R ([a],[b])))))));

{-# NEED drop #-}
drop{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R Int) -> (R (Trace -> ((R [a]) -> (R [a])))))))));

{-# NEED lookup #-}
lookup{-# 2 #-}::(Eq a) => (SR -> (Trace -> (R (Trace -> ((R a) -> (R (Trace -> ((R [(a,b)]) -> (R (Maybe b))))))))));

{-# NEED or #-}
or{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R [Bool]) -> (R Bool))))));

{-# NEED foldr #-}
foldr{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R b))))))) -> (R (Trace -> ((R b) -> (R (Trace -> ((R [a]) -> (R b))))))))))));

{-# NEED scanr #-}
scanr{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R b))))))) -> (R (Trace -> ((R b) -> (R (Trace -> ((R [a]) -> (R [b]))))))))))));

{-# NEED words #-}
words{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R String) -> (R [String]))))));

{-# NEED unwords #-}
unwords{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R [String]) -> (R String))))));

{-# NEED lines #-}
lines{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R String) -> (R [String]))))));

{-# NEED unlines #-}
unlines{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R [String]) -> (R String))))));

{-# NEED splitAt #-}
splitAt{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R Int) -> (R (Trace -> ((R [a]) -> (R ([a],[a]))))))))));

{-# NEED concat #-}
concat{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R [[a]]) -> (R [a]))))));

{-# NEED repeat #-}
repeat{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R [a]))))));

{-# NEED init #-}
init{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R [a]) -> (R [a]))))));

{-# NEED last #-}
last{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R [a]) -> (R a))))));

{-# NEED (!!) #-}
(!!){-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R [a]) -> (R (Trace -> ((R Int) -> (R a)))))))));

{-# NEED any #-}
any{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R Bool)))) -> (R (Trace -> ((R [a]) -> (R Bool)))))))));

{-# NEED fst #-}
fst{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (a,b)) -> (R a))))));

{-# NEED not #-}
not{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R Bool) -> (R Bool))))));

{-# NEED subtract #-}
subtract{-# 2 #-}::(Num a) => (SR -> (Trace -> (R (Trace -> ((R a) -> (R (Trace -> ((R a) -> (R a)))))))));

{-# NEED ($!) #-}
($!){-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R b)))) -> (R (Trace -> ((R a) -> (R b)))))))));

{-# NEED error #-}
error{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R String) -> (R a))))));

{-# NEED _filter #-}
_filter{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R Bool) -> (R (Trace -> ((R (Trace -> ((R [a]) -> (R [a])))) -> (R (Trace -> ((R [a]) -> (R [a]))))))))))));

{-# NEED filter #-}
filter{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R Bool)))) -> (R (Trace -> ((R [a]) -> (R [a])))))))));

{-# NEED either #-}
either{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R b)))) -> (R (Trace -> ((R (Trace -> ((R c) -> (R b)))) -> (R (Trace -> ((R (Either a c)) -> (R b))))))))))));

{-# NEED _foldr #-}
_foldr{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R b))))))) -> (R (Trace -> ((R [a]) -> (R (Trace -> ((R b) -> (R b))))))))))));

{-# NEED ($) #-}
($){-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R b)))) -> (R (Trace -> ((R a) -> (R b)))))))));

{-# NEED (||) #-}
(||){-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R Bool) -> (R (Trace -> ((R Bool) -> (R Bool)))))))));

{-# NEED seq #-}
seq{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R b)))))))));

{-# NEED flip #-}
flip{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R c))))))) -> (R (Trace -> ((R b) -> (R (Trace -> ((R a) -> (R c))))))))))));

{-# NEED maybe #-}
maybe{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R (Trace -> ((R (Trace -> ((R b) -> (R a)))) -> (R (Trace -> ((R (Maybe b)) -> (R a))))))))))));

{-# NEED _eqInteger #-}
_eqInteger{-# 2 #-}::(Integer -> (Integer -> Bool));

{-# NEED _eqFloat #-}
_eqFloat{-# 2 #-}::(Float -> (Float -> Bool));

{-# NEED _eqDouble #-}
_eqDouble{-# 2 #-}::(Double -> (Double -> Bool));

{-# NEED even #-}
even{-# 2 #-}::(Integral a) => (SR -> (Trace -> (R (Trace -> ((R a) -> (R Bool))))));

{-# NEED _fromEnum #-}
_fromEnum{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R Int))))));

{-# NEED _tprim_FromEnum #-}
_tprim_FromEnum{-# 2 #-}::(Trace -> ((R a) -> (R Int)));

{-# NEED sameAs #-}
sameAs{-# 2 #-}::(a -> (a -> Bool));

{-# NEED fatal #-}
fatal{-# 1 #-}::(Trace -> a);

{-# NEED cCheckEvaluation #-}
cCheckEvaluation{-# 1 #-}::((E a) -> _Value);

{-# NEED cPointerEquality #-}
cPointerEquality{-# 2 #-}::((E a) -> ((E a) -> Bool));

{-# NEED cSeq #-}
cSeq{-# 2 #-}::(a -> ((E b) -> b));

{-# NEED cEnter #-}
cEnter{-# 3 #-}::(NmType -> (Trace -> ((E a) -> a)));

{-# NEED cInitializeDebugger #-}
cInitializeDebugger{-# 1 #-}::((E a) -> a);

{-# NEED trusted #-}
trusted{-# 2 #-}::(Trace -> (Trace -> Bool));

{-# NEED trust #-}
trust{-# 1 #-}::(Trace -> Bool);

{-# NEED enter #-}
enter{-# 3 #-}::(NmType -> (Trace -> (a -> a)));

{-# NEED primEnter #-}
primEnter{-# 4 #-}::(NmCoerce a) => (SR -> (NmType -> (Trace -> (a -> (R a)))));

{-# NEED getRedexes #-}
getRedexes{-# 1 #-}::((R a) -> Trace);

{-# NEED t_guard #-}
t_guard{-# 5 #-}::(SR -> ((R Bool) -> ((Trace -> a) -> ((Trace -> a) -> (Trace -> a)))));

{-# NEED tif #-}
tif{-# 5 #-}::(SR -> ((R Bool) -> ((Trace -> a) -> ((Trace -> a) -> (Trace -> a)))));

{-# NEED evaled #-}
evaled{-# 1 #-}::(a -> _Value);

{-# NEED {_Value _Evaluating _Evaluated _Closure} #-}
data _Value
  = _Evaluating 
  | _Evaluated 
  | _Closure ;

{-# NEED initializeDebugger #-}
initializeDebugger{-# 1 #-}::(a -> a);

{-# NEED myseq #-}
myseq{-# 2 #-}::(a -> (b -> b));

{-# NEED rseq #-}
rseq{-# 2 #-}::((R a) -> (b -> b));

{-# NEED setOutputContext #-}
setOutputContext{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R b)))) -> (R (Trace -> ((R a) -> (R b)))))))));

{-# NEED _tprim_setOutputContext #-}
_tprim_setOutputContext{-# 2 #-}::(Trace -> ((E (R a)) -> (R a)));

{-# NEED {E E} #-}
data E a
  = E a;

{-# NEED hidden #-}
hidden{-# 1 #-}::(Trace -> Trace);

{-# NEED ap1 #-}
ap1{-# 4 #-}::(SR -> (Trace -> ((R (Trace -> ((R a) -> b))) -> ((R a) -> b))));

{-# NEED ap2 #-}
ap2{-# 5 #-}::(SR -> (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R b) -> c)))))) -> ((R a) -> ((R b) -> c)))));

{-# NEED ap3 #-}
ap3{-# 6 #-}::(SR -> (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> d))))))))) -> ((R a) -> ((R b) -> ((R c) -> d))))));

{-# NEED ap4 #-}
ap4{-# 7 #-}::(SR -> (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> e)))))))))))) -> ((R a) -> ((R b) -> ((R c) -> ((R d) -> e)))))));

{-# NEED ap5 #-}
ap5{-# 8 #-}::(SR -> (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> f))))))))))))))) -> ((R a) -> ((R b) -> ((R c) -> ((R d) -> ((R e) -> f))))))));

{-# NEED ap6 #-}
ap6{-# 9 #-}::(SR -> (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> g)))))))))))))))))) -> ((R a) -> ((R b) -> ((R c) -> ((R d) -> ((R e) -> ((R f) -> g)))))))));

{-# NEED ap7 #-}
ap7{-# 10 #-}::(SR -> (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> (R (Trace -> ((R g) -> h))))))))))))))))))))) -> ((R a) -> ((R b) -> ((R c) -> ((R d) -> ((R e) -> ((R f) -> ((R g) -> h))))))))));

{-# NEED ap8 #-}
ap8{-# 11 #-}::(SR -> (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> (R (Trace -> ((R g) -> (R (Trace -> ((R h) -> i)))))))))))))))))))))))) -> ((R a) -> ((R b) -> ((R c) -> ((R d) -> ((R e) -> ((R f) -> ((R g) -> ((R h) -> i)))))))))));

{-# NEED ap9 #-}
ap9{-# 12 #-}::(SR -> (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> (R (Trace -> ((R g) -> (R (Trace -> ((R h) -> (R (Trace -> ((R i) -> j))))))))))))))))))))))))))) -> ((R a) -> ((R b) -> ((R c) -> ((R d) -> ((R e) -> ((R f) -> ((R g) -> ((R h) -> ((R i) -> j))))))))))));

{-# NEED ap10 #-}
ap10{-# 13 #-}::(SR -> (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> (R (Trace -> ((R g) -> (R (Trace -> ((R h) -> (R (Trace -> ((R i) -> (R (Trace -> ((R j) -> k)))))))))))))))))))))))))))))) -> ((R a) -> ((R b) -> ((R c) -> ((R d) -> ((R e) -> ((R f) -> ((R g) -> ((R h) -> ((R i) -> ((R j) -> k)))))))))))));

{-# NEED ap11 #-}
ap11{-# 14 #-}::(SR -> (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> (R (Trace -> ((R g) -> (R (Trace -> ((R h) -> (R (Trace -> ((R i) -> (R (Trace -> ((R j) -> (R (Trace -> ((R k) -> l))))))))))))))))))))))))))))))))) -> ((R a) -> ((R b) -> ((R c) -> ((R d) -> ((R e) -> ((R f) -> ((R g) -> ((R h) -> ((R i) -> ((R j) -> ((R k) -> l))))))))))))));

{-# NEED ap12 #-}
ap12{-# 15 #-}::(SR -> (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> (R (Trace -> ((R g) -> (R (Trace -> ((R h) -> (R (Trace -> ((R i) -> (R (Trace -> ((R j) -> (R (Trace -> ((R k) -> (R (Trace -> ((R l) -> m)))))))))))))))))))))))))))))))))))) -> ((R a) -> ((R b) -> ((R c) -> ((R d) -> ((R e) -> ((R f) -> ((R g) -> ((R h) -> ((R i) -> ((R j) -> ((R k) -> ((R l) -> m)))))))))))))));

{-# NEED rap1 #-}
rap1{-# 4 #-}::(SR -> (Trace -> ((R (Trace -> ((R a) -> b))) -> ((R a) -> b))));

{-# NEED rap2 #-}
rap2{-# 5 #-}::(SR -> (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R b) -> c)))))) -> ((R a) -> ((R b) -> c)))));

{-# NEED rap3 #-}
rap3{-# 6 #-}::(SR -> (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> d))))))))) -> ((R a) -> ((R b) -> ((R c) -> d))))));

{-# NEED rap4 #-}
rap4{-# 7 #-}::(SR -> (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> e)))))))))))) -> ((R a) -> ((R b) -> ((R c) -> ((R d) -> e)))))));

{-# NEED rap5 #-}
rap5{-# 8 #-}::(SR -> (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> f))))))))))))))) -> ((R a) -> ((R b) -> ((R c) -> ((R d) -> ((R e) -> f))))))));

{-# NEED rap6 #-}
rap6{-# 9 #-}::(SR -> (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> g)))))))))))))))))) -> ((R a) -> ((R b) -> ((R c) -> ((R d) -> ((R e) -> ((R f) -> g)))))))));

{-# NEED rap7 #-}
rap7{-# 10 #-}::(SR -> (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> (R (Trace -> ((R g) -> h))))))))))))))))))))) -> ((R a) -> ((R b) -> ((R c) -> ((R d) -> ((R e) -> ((R f) -> ((R g) -> h))))))))));

{-# NEED rap8 #-}
rap8{-# 11 #-}::(SR -> (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> (R (Trace -> ((R g) -> (R (Trace -> ((R h) -> i)))))))))))))))))))))))) -> ((R a) -> ((R b) -> ((R c) -> ((R d) -> ((R e) -> ((R f) -> ((R g) -> ((R h) -> i)))))))))));

{-# NEED rap9 #-}
rap9{-# 12 #-}::(SR -> (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> (R (Trace -> ((R g) -> (R (Trace -> ((R h) -> (R (Trace -> ((R i) -> j))))))))))))))))))))))))))) -> ((R a) -> ((R b) -> ((R c) -> ((R d) -> ((R e) -> ((R f) -> ((R g) -> ((R h) -> ((R i) -> j))))))))))));

{-# NEED rap10 #-}
rap10{-# 13 #-}::(SR -> (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> (R (Trace -> ((R g) -> (R (Trace -> ((R h) -> (R (Trace -> ((R i) -> (R (Trace -> ((R j) -> k)))))))))))))))))))))))))))))) -> ((R a) -> ((R b) -> ((R c) -> ((R d) -> ((R e) -> ((R f) -> ((R g) -> ((R h) -> ((R i) -> ((R j) -> k)))))))))))));

{-# NEED rap11 #-}
rap11{-# 14 #-}::(SR -> (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> (R (Trace -> ((R g) -> (R (Trace -> ((R h) -> (R (Trace -> ((R i) -> (R (Trace -> ((R j) -> (R (Trace -> ((R k) -> l))))))))))))))))))))))))))))))))) -> ((R a) -> ((R b) -> ((R c) -> ((R d) -> ((R e) -> ((R f) -> ((R g) -> ((R h) -> ((R i) -> ((R j) -> ((R k) -> l))))))))))))));

{-# NEED rap12 #-}
rap12{-# 15 #-}::(SR -> (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> (R (Trace -> ((R g) -> (R (Trace -> ((R h) -> (R (Trace -> ((R i) -> (R (Trace -> ((R j) -> (R (Trace -> ((R k) -> (R (Trace -> ((R l) -> m)))))))))))))))))))))))))))))))))))) -> ((R a) -> ((R b) -> ((R c) -> ((R d) -> ((R e) -> ((R f) -> ((R g) -> ((R h) -> ((R i) -> ((R j) -> ((R k) -> ((R l) -> m)))))))))))))));

{-# NEED pap0 #-}
pap0{-# 2 #-}::(a -> (b -> b));

{-# NEED pap1 #-}
pap1{-# 4 #-}::(SR -> (Trace -> ((R (Trace -> ((R a) -> b))) -> ((R a) -> b))));

{-# NEED pap2 #-}
pap2{-# 5 #-}::(SR -> (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R b) -> c)))))) -> ((R a) -> ((R b) -> c)))));

{-# NEED pap3 #-}
pap3{-# 6 #-}::(SR -> (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> d))))))))) -> ((R a) -> ((R b) -> ((R c) -> d))))));

{-# NEED pap4 #-}
pap4{-# 7 #-}::(SR -> (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> e)))))))))))) -> ((R a) -> ((R b) -> ((R c) -> ((R d) -> e)))))));

{-# NEED pap5 #-}
pap5{-# 8 #-}::(SR -> (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> f))))))))))))))) -> ((R a) -> ((R b) -> ((R c) -> ((R d) -> ((R e) -> f))))))));

{-# NEED pap6 #-}
pap6{-# 9 #-}::(SR -> (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> g)))))))))))))))))) -> ((R a) -> ((R b) -> ((R c) -> ((R d) -> ((R e) -> ((R f) -> g)))))))));

{-# NEED pap7 #-}
pap7{-# 10 #-}::(SR -> (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> (R (Trace -> ((R g) -> h))))))))))))))))))))) -> ((R a) -> ((R b) -> ((R c) -> ((R d) -> ((R e) -> ((R f) -> ((R g) -> h))))))))));

{-# NEED pap8 #-}
pap8{-# 11 #-}::(SR -> (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> (R (Trace -> ((R g) -> (R (Trace -> ((R h) -> i)))))))))))))))))))))))) -> ((R a) -> ((R b) -> ((R c) -> ((R d) -> ((R e) -> ((R f) -> ((R g) -> ((R h) -> i)))))))))));

{-# NEED pap9 #-}
pap9{-# 12 #-}::(SR -> (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> (R (Trace -> ((R g) -> (R (Trace -> ((R h) -> (R (Trace -> ((R i) -> j))))))))))))))))))))))))))) -> ((R a) -> ((R b) -> ((R c) -> ((R d) -> ((R e) -> ((R f) -> ((R g) -> ((R h) -> ((R i) -> j))))))))))));

{-# NEED pap10 #-}
pap10{-# 13 #-}::(SR -> (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> (R (Trace -> ((R g) -> (R (Trace -> ((R h) -> (R (Trace -> ((R i) -> (R (Trace -> ((R j) -> k)))))))))))))))))))))))))))))) -> ((R a) -> ((R b) -> ((R c) -> ((R d) -> ((R e) -> ((R f) -> ((R g) -> ((R h) -> ((R i) -> ((R j) -> k)))))))))))));

{-# NEED pap11 #-}
pap11{-# 14 #-}::(SR -> (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> (R (Trace -> ((R g) -> (R (Trace -> ((R h) -> (R (Trace -> ((R i) -> (R (Trace -> ((R j) -> (R (Trace -> ((R k) -> l))))))))))))))))))))))))))))))))) -> ((R a) -> ((R b) -> ((R c) -> ((R d) -> ((R e) -> ((R f) -> ((R g) -> ((R h) -> ((R i) -> ((R j) -> ((R k) -> l))))))))))))));

{-# NEED patvar #-}
patvar{-# 4 #-}::(NmType -> ((R a) -> (SR -> (b -> (R a)))));

{-# NEED caf #-}
caf{-# 1 #-}::(a -> (b -> (c -> a)));

{-# NEED fun0 #-}
fun0{-# 4 #-}::(NmType -> ((Trace -> (R a)) -> (SR -> (Trace -> (R a)))));

{-# NEED fun1 #-}
fun1{-# 4 #-}::(NmType -> ((Trace -> (a -> (R b))) -> (SR -> (Trace -> (R (Trace -> (a -> (R b))))))));

{-# NEED fun2 #-}
fun2{-# 4 #-}::(NmType -> ((Trace -> (a -> (b -> (R c)))) -> (SR -> (Trace -> (R (Trace -> (a -> (R (Trace -> (b -> (R c)))))))))));

{-# NEED fun3 #-}
fun3{-# 4 #-}::(NmType -> ((Trace -> (a -> (b -> (c -> (R d))))) -> (SR -> (Trace -> (R (Trace -> (a -> (R (Trace -> (b -> (R (Trace -> (c -> (R d))))))))))))));

{-# NEED fun4 #-}
fun4{-# 4 #-}::(NmType -> ((Trace -> (a -> (b -> (c -> (d -> (R e)))))) -> (SR -> (Trace -> (R (Trace -> (a -> (R (Trace -> (b -> (R (Trace -> (c -> (R (Trace -> (d -> (R e)))))))))))))))));

{-# NEED fun5 #-}
fun5{-# 4 #-}::(NmType -> ((Trace -> (a -> (b -> (c -> (d -> (e -> (R f))))))) -> (SR -> (Trace -> (R (Trace -> (a -> (R (Trace -> (b -> (R (Trace -> (c -> (R (Trace -> (d -> (R (Trace -> (e -> (R f))))))))))))))))))));

{-# NEED fun6 #-}
fun6{-# 4 #-}::(NmType -> ((Trace -> (a -> (b -> (c -> (d -> (e -> (f -> (R g)))))))) -> (SR -> (Trace -> (R (Trace -> (a -> (R (Trace -> (b -> (R (Trace -> (c -> (R (Trace -> (d -> (R (Trace -> (e -> (R (Trace -> (f -> (R g)))))))))))))))))))))));

{-# NEED fun7 #-}
fun7{-# 4 #-}::(NmType -> ((Trace -> (a -> (b -> (c -> (d -> (e -> (f -> (g -> (R h))))))))) -> (SR -> (Trace -> (R (Trace -> (a -> (R (Trace -> (b -> (R (Trace -> (c -> (R (Trace -> (d -> (R (Trace -> (e -> (R (Trace -> (f -> (R (Trace -> (g -> (R h))))))))))))))))))))))))));

{-# NEED fun8 #-}
fun8{-# 4 #-}::(NmType -> ((Trace -> (a -> (b -> (c -> (d -> (e -> (f -> (g -> (h -> (R i)))))))))) -> (SR -> (Trace -> (R (Trace -> (a -> (R (Trace -> (b -> (R (Trace -> (c -> (R (Trace -> (d -> (R (Trace -> (e -> (R (Trace -> (f -> (R (Trace -> (g -> (R (Trace -> (h -> (R i)))))))))))))))))))))))))))));

{-# NEED fun9 #-}
fun9{-# 4 #-}::(NmType -> ((Trace -> (a -> (b -> (c -> (d -> (e -> (f -> (g -> (h -> (i -> (R j))))))))))) -> (SR -> (Trace -> (R (Trace -> (a -> (R (Trace -> (b -> (R (Trace -> (c -> (R (Trace -> (d -> (R (Trace -> (e -> (R (Trace -> (f -> (R (Trace -> (g -> (R (Trace -> (h -> (R (Trace -> (i -> (R j))))))))))))))))))))))))))))))));

{-# NEED fun10 #-}
fun10{-# 4 #-}::(NmType -> ((Trace -> (a -> (b -> (c -> (d -> (e -> (f -> (g -> (h -> (i -> (j -> (R k)))))))))))) -> (SR -> (Trace -> (R (Trace -> (a -> (R (Trace -> (b -> (R (Trace -> (c -> (R (Trace -> (d -> (R (Trace -> (e -> (R (Trace -> (f -> (R (Trace -> (g -> (R (Trace -> (h -> (R (Trace -> (i -> (R (Trace -> (j -> (R k)))))))))))))))))))))))))))))))))));

{-# NEED fun11 #-}
fun11{-# 4 #-}::(NmType -> ((Trace -> (a -> (b -> (c -> (d -> (e -> (f -> (g -> (h -> (i -> (j -> (k -> (R l))))))))))))) -> (SR -> (Trace -> (R (Trace -> (a -> (R (Trace -> (b -> (R (Trace -> (c -> (R (Trace -> (d -> (R (Trace -> (e -> (R (Trace -> (f -> (R (Trace -> (g -> (R (Trace -> (h -> (R (Trace -> (i -> (R (Trace -> (j -> (R (Trace -> (k -> (R l))))))))))))))))))))))))))))))))))))));

{-# NEED fun12 #-}
fun12{-# 4 #-}::(NmType -> ((Trace -> (a -> (b -> (c -> (d -> (e -> (f -> (g -> (h -> (i -> (j -> (k -> (l -> (R m)))))))))))))) -> (SR -> (Trace -> (R (Trace -> (a -> (R (Trace -> (b -> (R (Trace -> (c -> (R (Trace -> (d -> (R (Trace -> (e -> (R (Trace -> (f -> (R (Trace -> (g -> (R (Trace -> (h -> (R (Trace -> (i -> (R (Trace -> (j -> (R (Trace -> (k -> (R (Trace -> (l -> (R m)))))))))))))))))))))))))))))))))))))))));

{-# NEED prim0 #-}
prim0{-# 4 #-}::(NmCoerce a) => (NmType -> (a -> (SR -> (Trace -> (R a)))));

{-# NEED prim1 #-}
prim1{-# 4 #-}::(NmCoerce b) => (NmType -> ((a -> b) -> (SR -> (Trace -> (R (Trace -> ((R a) -> (R b))))))));

{-# NEED prim2 #-}
prim2{-# 4 #-}::(NmCoerce c) => (NmType -> ((a -> (b -> c)) -> (SR -> (Trace -> (R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R c)))))))))));

{-# NEED prim3 #-}
prim3{-# 4 #-}::(NmCoerce d) => (NmType -> ((a -> (b -> (c -> d))) -> (SR -> (Trace -> (R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R d))))))))))))));

{-# NEED prim4 #-}
prim4{-# 4 #-}::(NmCoerce e) => (NmType -> ((a -> (b -> (c -> (d -> e)))) -> (SR -> (Trace -> (R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R e)))))))))))))))));

{-# NEED prim5 #-}
prim5{-# 4 #-}::(NmCoerce f) => (NmType -> ((a -> (b -> (c -> (d -> (e -> f))))) -> (SR -> (Trace -> (R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R f))))))))))))))))))));

{-# NEED prim6 #-}
prim6{-# 4 #-}::(NmCoerce g) => (NmType -> ((a -> (b -> (c -> (d -> (e -> (f -> g)))))) -> (SR -> (Trace -> (R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> (R g)))))))))))))))))))))));

{-# NEED prim7 #-}
prim7{-# 4 #-}::(NmCoerce h) => (NmType -> ((a -> (b -> (c -> (d -> (e -> (f -> (g -> h))))))) -> (SR -> (Trace -> (R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> (R (Trace -> ((R g) -> (R h))))))))))))))))))))))))));

{-# NEED prim8 #-}
prim8{-# 4 #-}::(NmCoerce i) => (NmType -> ((a -> (b -> (c -> (d -> (e -> (f -> (g -> (h -> i)))))))) -> (SR -> (Trace -> (R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> (R (Trace -> ((R g) -> (R (Trace -> ((R h) -> (R i)))))))))))))))))))))))))))));

{-# NEED prim9 #-}
prim9{-# 4 #-}::(NmCoerce j) => (NmType -> ((a -> (b -> (c -> (d -> (e -> (f -> (g -> (h -> (i -> j))))))))) -> (SR -> (Trace -> (R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> (R (Trace -> ((R g) -> (R (Trace -> ((R h) -> (R (Trace -> ((R i) -> (R j))))))))))))))))))))))))))))))));

{-# NEED prim10 #-}
prim10{-# 4 #-}::(NmCoerce k) => (NmType -> ((a -> (b -> (c -> (d -> (e -> (f -> (g -> (h -> (i -> (j -> k)))))))))) -> (SR -> (Trace -> (R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> (R (Trace -> ((R g) -> (R (Trace -> ((R h) -> (R (Trace -> ((R i) -> (R (Trace -> ((R j) -> (R k)))))))))))))))))))))))))))))))))));

{-# NEED prim11 #-}
prim11{-# 4 #-}::(NmCoerce l) => (NmType -> ((a -> (b -> (c -> (d -> (e -> (f -> (g -> (h -> (i -> (j -> (k -> l))))))))))) -> (SR -> (Trace -> (R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> (R (Trace -> ((R g) -> (R (Trace -> ((R h) -> (R (Trace -> ((R i) -> (R (Trace -> ((R j) -> (R (Trace -> ((R k) -> (R l))))))))))))))))))))))))))))))))))))));

{-# NEED prim12 #-}
prim12{-# 4 #-}::(NmCoerce m) => (NmType -> ((a -> (b -> (c -> (d -> (e -> (f -> (g -> (h -> (i -> (j -> (k -> (l -> m)))))))))))) -> (SR -> (Trace -> (R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> (R (Trace -> ((R g) -> (R (Trace -> ((R h) -> (R (Trace -> ((R i) -> (R (Trace -> ((R j) -> (R (Trace -> ((R k) -> (R (Trace -> ((R l) -> (R m)))))))))))))))))))))))))))))))))))))))));


{-# NEED indir #-}
indir{-# 2 #-}::(Trace -> ((R a) -> (R a)));

{-# NEED rPatBool #-}
rPatBool{-# 1 #-}::(R Bool -> Bool);

{-# NEED conInt #-}
conInt{-# 3 #-}::(SR -> (Trace -> (Int -> (R Int))));

{-# NEED conChar #-}
conChar{-# 3 #-}::(SR -> (Trace -> (Char -> (R Char))));

{-# NEED conInteger #-}
conInteger{-# 3 #-}::(SR -> (Trace -> (Integer -> (R Integer))));

{-# NEED fromConInteger #-}
fromConInteger{-# 3 #-}::(Num a) => (SR -> (Trace -> (Integer -> (R a))));

{-# NEED patFromConInteger #-}
patFromConInteger{-# 3 #-}::(Num a) => (SR -> (Trace -> (Integer -> (R a))));

{-# NEED fromConRational #-}
fromConRational{-# 3 #-}::(Fractional a) => (SR -> (Trace -> (Ratio.Rational -> (R a))));

{-# NEED patFromConRational #-}
patFromConRational{-# 3 #-}::(Fractional a) => (SR -> (Trace -> (Ratio.Rational -> (R a))));

{-# NEED conRational #-}
conRational{-# 3 #-}::(SR -> (Trace -> (Rational -> (R Rational))));

{-# NEED conFloat #-}
conFloat{-# 3 #-}::(SR -> (Trace -> (Float -> (R Float))));

{-# NEED conDouble #-}
conDouble{-# 3 #-}::(SR -> (Trace -> (Double -> (R Double))));

{-# NEED con0 #-}
con0{-# 4 #-}::(SR -> (Trace -> (a -> (NmType -> (R a)))));

{-# NEED con1 #-}
con1{-# 5 #-}::(SR -> (Trace -> (((R a) -> b) -> (NmType -> ((R a) -> (R b))))));

{-# NEED con2 #-}
con2{-# 6 #-}::(SR -> (Trace -> (((R a) -> ((R b) -> c)) -> (NmType -> ((R a) -> ((R b) -> (R c)))))));

{-# NEED con3 #-}
con3{-# 7 #-}::(SR -> (Trace -> (((R a) -> ((R b) -> ((R c) -> d))) -> (NmType -> ((R a) -> ((R b) -> ((R c) -> (R d))))))));

{-# NEED con4 #-}
con4{-# 8 #-}::(SR -> (Trace -> (((R a) -> ((R b) -> ((R c) -> ((R d) -> e)))) -> (NmType -> ((R a) -> ((R b) -> ((R c) -> ((R d) -> (R e)))))))));

{-# NEED con5 #-}
con5{-# 9 #-}::(SR -> (Trace -> (((R a) -> ((R b) -> ((R c) -> ((R d) -> ((R e) -> f))))) -> (NmType -> ((R a) -> ((R b) -> ((R c) -> ((R d) -> ((R e) -> (R f))))))))));

{-# NEED con6 #-}
con6{-# 10 #-}::(SR -> (Trace -> (((R a) -> ((R b) -> ((R c) -> ((R d) -> ((R e) -> ((R f) -> g)))))) -> (NmType -> ((R a) -> ((R b) -> ((R c) -> ((R d) -> ((R e) -> ((R f) -> (R g)))))))))));

{-# NEED con7 #-}
con7{-# 11 #-}::(SR -> (Trace -> (((R a) -> ((R b) -> ((R c) -> ((R d) -> ((R e) -> ((R f) -> ((R g) -> h))))))) -> (NmType -> ((R a) -> ((R b) -> ((R c) -> ((R d) -> ((R e) -> ((R f) -> ((R g) -> (R h))))))))))));

{-# NEED con8 #-}
con8{-# 12 #-}::(SR -> (Trace -> (((R a) -> ((R b) -> ((R c) -> ((R d) -> ((R e) -> ((R f) -> ((R g) -> ((R h) -> i)))))))) -> (NmType -> ((R a) -> ((R b) -> ((R c) -> ((R d) -> ((R e) -> ((R f) -> ((R g) -> ((R h) -> (R i)))))))))))));

{-# NEED con9 #-}
con9{-# 13 #-}::(SR -> (Trace -> (((R a) -> ((R b) -> ((R c) -> ((R d) -> ((R e) -> ((R f) -> ((R g) -> ((R h) -> ((R i) -> j))))))))) -> (NmType -> ((R a) -> ((R b) -> ((R c) -> ((R d) -> ((R e) -> ((R f) -> ((R g) -> ((R h) -> ((R i) -> (R j))))))))))))));

{-# NEED con10 #-}
con10{-# 14 #-}::(SR -> (Trace -> (((R a) -> ((R b) -> ((R c) -> ((R d) -> ((R e) -> ((R f) -> ((R g) -> ((R h) -> ((R i) -> ((R j) -> k)))))))))) -> (NmType -> ((R a) -> ((R b) -> ((R c) -> ((R d) -> ((R e) -> ((R f) -> ((R g) -> ((R h) -> ((R i) -> ((R j) -> (R k)))))))))))))));

{-# NEED con11 #-}
con11{-# 15 #-}::(SR -> (Trace -> (((R a) -> ((R b) -> ((R c) -> ((R d) -> ((R e) -> ((R f) -> ((R g) -> ((R h) -> ((R i) -> ((R j) -> ((R k) -> l))))))))))) -> (NmType -> ((R a) -> ((R b) -> ((R c) -> ((R d) -> ((R e) -> ((R f) -> ((R g) -> ((R h) -> ((R i) -> ((R j) -> ((R k) -> (R l))))))))))))))));

{-# NEED con12 #-}
con12{-# 16 #-}::(SR -> (Trace -> (((R a) -> ((R b) -> ((R c) -> ((R d) -> ((R e) -> ((R f) -> ((R g) -> ((R h) -> ((R i) -> ((R j) -> ((R k) -> ((R l) -> m)))))))))))) -> (NmType -> ((R a) -> ((R b) -> ((R c) -> ((R d) -> ((R e) -> ((R f) -> ((R g) -> ((R h) -> ((R i) -> ((R j) -> ((R k) -> ((R l) -> (R m)))))))))))))))));

{-# NEED getArgRedexes #-}
getArgRedexes{-# 1 #-}::([(R a)] -> Traces);

{-# NEED mkAp #-}
mkAp{-# 4 #-}::(Trace -> (Trace -> (SR -> (Traces -> Trace))));

{-# NEED spine #-}
spine{-# 1 #-}::(Traces -> ());

{-# NEED value #-}
value{-# 1 #-}::((R a) -> a);

{-# NEED cn1 #-}
cn1{-# 2 #-}::((a -> b) -> (Trace -> (R (Trace -> (a -> (R b))))));

{-# NEED cn2 #-}
cn2{-# 2 #-}::((a -> (b -> c)) -> (Trace -> (R (Trace -> (a -> (R (Trace -> (b -> (R c)))))))));

{-# NEED cn3 #-}
cn3{-# 2 #-}::((a -> (b -> (c -> d))) -> (Trace -> (R (Trace -> (a -> (R (Trace -> (b -> (R (Trace -> (c -> (R d))))))))))));

{-# NEED cn4 #-}
cn4{-# 2 #-}::((a -> (b -> (c -> (d -> e)))) -> (Trace -> (R (Trace -> (a -> (R (Trace -> (b -> (R (Trace -> (c -> (R (Trace -> (d -> (R e)))))))))))))));

{-# NEED cn5 #-}
cn5{-# 2 #-}::((a -> (b -> (c -> (d -> (e -> f))))) -> (Trace -> (R (Trace -> (a -> (R (Trace -> (b -> (R (Trace -> (c -> (R (Trace -> (d -> (R (Trace -> (e -> (R f))))))))))))))))));

{-# NEED cn6 #-}
cn6{-# 2 #-}::((a -> (b -> (c -> (d -> (e -> (f -> g)))))) -> (Trace -> (R (Trace -> (a -> (R (Trace -> (b -> (R (Trace -> (c -> (R (Trace -> (d -> (R (Trace -> (e -> (R (Trace -> (f -> (R g)))))))))))))))))))));

{-# NEED cn7 #-}
cn7{-# 2 #-}::((a -> (b -> (c -> (d -> (e -> (f -> (g -> h))))))) -> (Trace -> (R (Trace -> (a -> (R (Trace -> (b -> (R (Trace -> (c -> (R (Trace -> (d -> (R (Trace -> (e -> (R (Trace -> (f -> (R (Trace -> (g -> (R h))))))))))))))))))))))));

{-# NEED cn8 #-}
cn8{-# 2 #-}::((a -> (b -> (c -> (d -> (e -> (f -> (g -> (h -> i)))))))) -> (Trace -> (R (Trace -> (a -> (R (Trace -> (b -> (R (Trace -> (c -> (R (Trace -> (d -> (R (Trace -> (e -> (R (Trace -> (f -> (R (Trace -> (g -> (R (Trace -> (h -> (R i)))))))))))))))))))))))))));

{-# NEED pa0 #-}
pa0{-# 3 #-}::(SR -> (Trace -> (NmType -> Trace)));

{-# NEED pa1 #-}
pa1{-# 4 #-}::(SR -> (Trace -> (NmType -> ((R a) -> Trace))));

{-# NEED pa2 #-}
pa2{-# 5 #-}::(SR -> (Trace -> (NmType -> ((R a) -> ((R b) -> Trace)))));

{-# NEED pa3 #-}
pa3{-# 6 #-}::(SR -> (Trace -> (NmType -> ((R a) -> ((R b) -> ((R c) -> Trace))))));

{-# NEED pa4 #-}
pa4{-# 7 #-}::(SR -> (Trace -> (NmType -> ((R a) -> ((R b) -> ((R c) -> ((R d) -> Trace)))))));

{-# NEED c1 #-}
c1{-# 4 #-}::(NmType -> ((a -> b) -> (SR -> (Trace -> (R (Trace -> (a -> (R b))))))));

{-# NEED c2 #-}
c2{-# 4 #-}::(NmType -> ((a -> (b -> c)) -> (SR -> (Trace -> (R (Trace -> (a -> (R (Trace -> (b -> (R c)))))))))));

{-# NEED c3 #-}
c3{-# 4 #-}::(NmType -> ((a -> (b -> (c -> d))) -> (SR -> (Trace -> (R (Trace -> (a -> (R (Trace -> (b -> (R (Trace -> (c -> (R d))))))))))))));

{-# NEED c4 #-}
c4{-# 4 #-}::(NmType -> ((a -> (b -> (c -> (d -> e)))) -> (SR -> (Trace -> (R (Trace -> (a -> (R (Trace -> (b -> (R (Trace -> (c -> (R (Trace -> (d -> (R e)))))))))))))))));

{-# NEED c5 #-}
c5{-# 4 #-}::(NmType -> ((a -> (b -> (c -> (d -> (e -> f))))) -> (SR -> (Trace -> (R (Trace -> (a -> (R (Trace -> (b -> (R (Trace -> (c -> (R (Trace -> (d -> (R (Trace -> (e -> (R f))))))))))))))))))));

{-# NEED c6 #-}
c6{-# 4 #-}::(NmType -> ((a -> (b -> (c -> (d -> (e -> (f -> g)))))) -> (SR -> (Trace -> (R (Trace -> (a -> (R (Trace -> (b -> (R (Trace -> (c -> (R (Trace -> (d -> (R (Trace -> (e -> (R (Trace -> (f -> (R g)))))))))))))))))))))));

{-# NEED c7 #-}
c7{-# 4 #-}::(NmType -> ((a -> (b -> (c -> (d -> (e -> (f -> (g -> h))))))) -> (SR -> (Trace -> (R (Trace -> (a -> (R (Trace -> (b -> (R (Trace -> (c -> (R (Trace -> (d -> (R (Trace -> (e -> (R (Trace -> (f -> (R (Trace -> (g -> (R h))))))))))))))))))))))))));

{-# NEED c8 #-}
c8{-# 4 #-}::(NmType -> ((a -> (b -> (c -> (d -> (e -> (f -> (g -> (h -> i)))))))) -> (SR -> (Trace -> (R (Trace -> (a -> (R (Trace -> (b -> (R (Trace -> (c -> (R (Trace -> (d -> (R (Trace -> (e -> (R (Trace -> (f -> (R (Trace -> (g -> (R (Trace -> (h -> (R i)))))))))))))))))))))))))))));

{-# NEED c9 #-}
c9{-# 0 #-}::Bool;

{-# NEED c10 #-}
c10{-# 0 #-}::Bool;

{-# NEED c11 #-}
c11{-# 0 #-}::Bool;

{-# NEED c12 #-}
c12{-# 0 #-}::Bool;

{-# NEED _fromInteger #-}
_fromInteger{-# 0 #-}::Bool;

{-# NEED _fromRational #-}
_fromRational{-# 0 #-}::Bool;

{-# NEED _error #-}
_error{-# 0 #-}::a;

{-# NEED {RList RCons RNil} #-}
data RList a
  = RCons 
  | RNil ;

{-# NEED RString #-}
type {-# 1 #-} RString = Bool;

{-# NEED stringConst #-}
stringConst{-# 3 #-}::(SR -> (Trace -> (a -> (R String))));

{-# NEED dbgprint #-}
dbgprint{-# 0 #-}::Bool;

{-# NEED _prim #-}
_prim{-# 0 #-}::a;

{-# NEED _hide #-}
_hide{-# 0 #-}::(a -> a);

{-# NEED dummy #-}
dummy{-# 0 #-}::Char;

{-# NEED sequence #-}
sequence{-# 2 #-}::(Monad a) => (SR -> (Trace -> (R (Trace -> ((R [(a b)]) -> (R (a [b])))))));

{-# NEED (.) #-}
(.){-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R b)))) -> (R (Trace -> ((R (Trace -> ((R c) -> (R a)))) -> (R (Trace -> ((R c) -> (R b))))))))))));

{-# NEED otherwise #-}
otherwise{-# 2 #-}::(SR -> (Trace -> (R Bool)));

{-# NEED sequence_ #-}
sequence_{-# 2 #-}::(Monad a) => (SR -> (Trace -> (R (Trace -> ((R [(a b)]) -> (R (a ())))))));

{-# NEED asTypeOf #-}
asTypeOf{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R (Trace -> ((R a) -> (R a)))))))));

{-# NEED snd #-}
snd{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (a,b)) -> (R b))))));

{-# NEED (&&) #-}
(&&){-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R Bool) -> (R (Trace -> ((R Bool) -> (R Bool)))))))));

{-# NEED undefined #-}
undefined{-# 2 #-}::(SR -> (Trace -> (R a)));

{-# NEED odd #-}
odd{-# 2 #-}::(Integral a) => (SR -> (Trace -> (R (Trace -> ((R a) -> (R Bool))))));

{-# NEED gcd #-}
gcd{-# 2 #-}::(Integral a) => (SR -> (Trace -> (R (Trace -> ((R a) -> (R (Trace -> ((R a) -> (R a)))))))));

{-# NEED lcm #-}
lcm{-# 2 #-}::(Integral a) => (SR -> (Trace -> (R (Trace -> ((R a) -> (R (Trace -> ((R a) -> (R a)))))))));

{-# NEED lex #-}
lex{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R String) -> (R [(String,String)]))))));

{-# NEED until #-}
until{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R Bool)))) -> (R (Trace -> ((R (Trace -> ((R a) -> (R a)))) -> (R (Trace -> ((R a) -> (R a))))))))))));

{-# NEED fromIntegral #-}
fromIntegral{-# 2 #-}::(Integral a,Num b) => (SR -> (Trace -> (R (Trace -> ((R a) -> (R b))))));

{-# NEED id #-}
id{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R a))))));

{-# NEED _id #-}
_id{-# 1 #-}::(a -> a);

{-# NEED mapM_ #-}
mapM_{-# 2 #-}::(Monad b) => (SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R (b c))))) -> (R (Trace -> ((R [a]) -> (R (b ()))))))))));

{-# NEED writeFile #-}
writeFile{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R FilePath) -> (R (Trace -> ((R String) -> (R (IO ()))))))))));

{-# NEED FilePath #-}
type {-# 2 #-} FilePath = String;

{-# NEED getLine #-}
getLine{-# 2 #-}::(SR -> (Trace -> (R (IO String))));

{-# NEED catch #-}
catch{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (IO a)) -> (R (Trace -> ((R (Trace -> ((R IOError) -> (R (IO a))))) -> (R (IO a))))))))));

{-# NEED ioError #-}
ioError{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R IOError) -> (R (IO a)))))));

{-# NEED putStrLn #-}
putStrLn{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R String) -> (R (IO ())))))));

{-# NEED getChar #-}
getChar{-# 2 #-}::(SR -> (Trace -> (R (IO Char))));

{-# NEED putChar #-}
putChar{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R Char) -> (R (IO ())))))));

{-# NEED userError #-}
userError{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R String) -> (R IOError))))));

{-# NEED putStr #-}
putStr{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R String) -> (R (IO ())))))));

{-# NEED getContents #-}
getContents{-# 2 #-}::(SR -> (Trace -> (R (IO [Char]))));

{-# NEED interact #-}
interact{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R String) -> (R String)))) -> (R (IO ())))))));

{-# NEED print #-}
print{-# 2 #-}::(Show a) => (SR -> (Trace -> (R (Trace -> ((R a) -> (R (IO ())))))));

{-# NEED read #-}
read{-# 2 #-}::(Read a) => (SR -> (Trace -> (R (Trace -> ((R String) -> (R a))))));

{-# NEED (=<<) #-}
(=<<){-# 2 #-}::(Monad b) => (SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R (b c))))) -> (R (Trace -> ((R (b a)) -> (R (b c))))))))));

{-# NEED mapM #-}
mapM{-# 2 #-}::(Monad b) => (SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R (b c))))) -> (R (Trace -> ((R [a]) -> (R (b [c]))))))))));

{-# NEED IOError #-}
data IOError;

{-# NEED {Either Left Right} #-}
data Either a b
  = Left (R a)
  | Right (R b);

{-# NEED {Maybe Nothing Just} #-}
data Maybe a
  = Nothing 
  | Just (R a);

{-# NEED #-}
data (,,,,,,,,) a b c d e f g h i
 = (,,,,,,,,) (R a) (R b) (R c) (R d) (R e) (R f) (R g) (R h) (R i);

{-# NEED #-}
data (,,,,,,,) a b c d e f g h
 = (,,,,,,,) (R a) (R b) (R c) (R d) (R e) (R f) (R g) (R h);

{-# NEED #-}
data (,,,,,,) a b c d e f g
 = (,,,,,,) (R a) (R b) (R c) (R d) (R e) (R f) (R g);

{-# NEED #-}
data (,,,,,) a b c d e f
 = (,,,,,) (R a) (R b) (R c) (R d) (R e) (R f);

{-# NEED #-}
data (,,,,) a b c d e
 = (,,,,) (R a) (R b) (R c) (R d) (R e);

{-# NEED _apply4 #-}
_apply4{-# 5 #-}::((a -> (b -> (c -> (d -> e)))) -> (a -> (b -> (c -> (d -> e)))));

{-# NEED _apply3 #-}
_apply3{-# 4 #-}::((a -> (b -> (c -> d))) -> (a -> (b -> (c -> d))));

{-# NEED _apply2 #-}
_apply2{-# 3 #-}::((a -> (b -> c)) -> (a -> (b -> c)));

{-# NEED #-}
data (,,,,,,,,,,,) a b c d e f g h i j k l
 = (,,,,,,,,,,,) (R a) (R b) (R c) (R d) (R e) (R f) (R g) (R h) (R i) (R j) (R k) (R l);

{-# NEED _apply1 #-}
_apply1{-# 2 #-}::((a -> b) -> (a -> b));

{-# NEED {RealFloat exponent significand scaleFloat atan2 floatRadix floatDigits floatRange decodeFloat encodeFloat isNaN isInfinite isDenormalized isNegativeZero} #-}
class (RealFrac a,Floating a) => RealFloat a where {
  exponent{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R Int))))));
  significand{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R a))))));
  scaleFloat{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R Int) -> (R (Trace -> ((R a) -> (R a)))))))));
  atan2{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R (Trace -> ((R a) -> (R a)))))))));
  floatRadix{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R Integer))))));
  floatDigits{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R Int))))));
  floatRange{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R (Int,Int)))))));
  decodeFloat{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R (Integer,Int)))))));
  encodeFloat{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R Integer) -> (R (Trace -> ((R Int) -> (R a)))))))));
  isNaN{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R Bool))))));
  isInfinite{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R Bool))))));
  isDenormalized{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R Bool))))));
  isNegativeZero{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R Bool))))));
};

{-# NEED {Floating pi exp log sqrt (**) logBase sin cos tan asin acos atan sinh cosh tanh asinh acosh atanh} #-}
class (Fractional a) => Floating a where {
  pi{-# 2 #-}::(SR -> (Trace -> (R a)));
  exp{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R a))))));
  log{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R a))))));
  sqrt{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R a))))));
  (**){-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R (Trace -> ((R a) -> (R a)))))))));
  logBase{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R (Trace -> ((R a) -> (R a)))))))));
  sin{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R a))))));
  cos{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R a))))));
  tan{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R a))))));
  asin{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R a))))));
  acos{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R a))))));
  atan{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R a))))));
  sinh{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R a))))));
  cosh{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R a))))));
  tanh{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R a))))));
  asinh{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R a))))));
  acosh{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R a))))));
  atanh{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R a))))));
};

{-# NEED {RealFrac properFraction truncate round ceiling floor} #-}
class (Real a,Fractional a) => RealFrac a where {
  properFraction{-# 2 #-}::(Integral b,Num b) => (SR -> (Trace -> (R (Trace -> ((R a) -> (R (b,a)))))));
  truncate{-# 2 #-}::(Integral b,Num b) => (SR -> (Trace -> (R (Trace -> ((R a) -> (R b))))));
  round{-# 2 #-}::(Integral b,Num b) => (SR -> (Trace -> (R (Trace -> ((R a) -> (R b))))));
  ceiling{-# 2 #-}::(Integral b,Num b) => (SR -> (Trace -> (R (Trace -> ((R a) -> (R b))))));
  floor{-# 2 #-}::(Integral b,Num b) => (SR -> (Trace -> (R (Trace -> ((R a) -> (R b))))));
};

{-# NEED {Fractional recip (/) fromRational} #-}
class (Num a) => Fractional a where {
  recip{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R a))))));
  (/){-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R (Trace -> ((R a) -> (R a)))))))));
  fromRational{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R Ratio.Rational) -> (R a))))));
};

{-# NEED #-}
data (,,,,,,,,,,) a b c d e f g h i j k
 = (,,,,,,,,,,) (R a) (R b) (R c) (R d) (R e) (R f) (R g) (R h) (R i) (R j) (R k);

{-# NEED #-}
data (,,,,,,,,,) a b c d e f g h i j
 = (,,,,,,,,,) (R a) (R b) (R c) (R d) (R e) (R f) (R g) (R h) (R i) (R j);

{-# NEED IO #-}
data IO a;

{-# NEED #-}
data ()
 = ();

{-# NEED #-}
data (,,,) a b c d
 = (,,,) (R a) (R b) (R c) (R d);

{-# NEED #-}
data (,,) a b c
 = (,,) (R a) (R b) (R c);

{-# NEED {Functor fmap} #-}
class Functor a where {
  fmap{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R b) -> (R c)))) -> (R (Trace -> ((R (a b)) -> (R (a c))))))))));
};

{-# NEED {Monad (>>=) (>>) return fail} #-}
class Monad a where {
  (>>=){-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (a b)) -> (R (Trace -> ((R (Trace -> ((R b) -> (R (a c))))) -> (R (a c))))))))));
  (>>){-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (a b)) -> (R (Trace -> ((R (a c)) -> (R (a c))))))))));
  return{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R b) -> (R (a b)))))));
  fail{-# 2 #-}:: (SR -> (Trace -> (R (Trace -> ((R String) -> (R (a b)))))));
};

{-# NEED {Read readsPrec readList} #-}
class Read a where {
  readsPrec{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R Int) -> (R (ReadS a)))))));
  readList{-# 2 #-}::(SR -> (Trace -> (R (ReadS [a]))));
};

{-# NEED ReadS #-}
type {-# 2 #-} ReadS a = (Trace -> ((R String) -> (R [(a,String)])));

{-# NEED {Show showList showsPrec showsType show} {Eq (/=) (==)} {Ord compare (<=) (<) (>=) (>) max min} {Enum toEnum fromEnum enumFrom enumFromThen enumFromTo enumFromThenTo} {[] [] (:)} {R R} {Trace Ap Nm Ind Root Sat Pruned Hidden} {Traces TNil TCons} {NmType NTInt NTChar NTInteger NTRational NTFloat NTDouble NTId NTConstr NTTuple NTFun NTCase NTLambda NTDummy NTCString NTIf NTGuard} {Num (-) (+) (*) negate abs signum fromInteger} {Real toRational} Ratio.Ratio Ratio.Rational {Integral div mod quotRem divMod quot rem toInteger} String ShowS #-}
class Show a where {
  showList{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R [a]) -> (R ShowS))))));
  showsPrec{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R Int) -> (R (Trace -> ((R a) -> (R ShowS)))))))));
  showsType{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R ShowS))))));
  show{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R String))))));
};
class Eq a where {
  (/=){-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R (Trace -> ((R a) -> (R Bool)))))))));
  (==){-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R (Trace -> ((R a) -> (R Bool)))))))));
};
class (Eq a) => Ord a where {
  compare{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R (Trace -> ((R a) -> (R Ordering)))))))));
  (<=){-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R (Trace -> ((R a) -> (R Bool)))))))));
  (<){-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R (Trace -> ((R a) -> (R Bool)))))))));
  (>=){-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R (Trace -> ((R a) -> (R Bool)))))))));
  (>){-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R (Trace -> ((R a) -> (R Bool)))))))));
  max{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R (Trace -> ((R a) -> (R a)))))))));
  min{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R (Trace -> ((R a) -> (R a)))))))));
};
class Enum a where {
  succ{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R a))))));
  pred{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R a))))));
  enumFromTo{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R (Trace -> ((R a) -> (R [a])))))))));
  enumFromThenTo{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R (Trace -> ((R a) -> (R (Trace -> ((R a) -> (R [a]))))))))))));
  toEnum{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R Int) -> (R a))))));
  fromEnum{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R Int))))));
  enumFrom{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R [a]))))));
  enumFromThen{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R (Trace -> (( R a) -> (R [a])))))))));
};
data (,) a b
 = (,) (R a) (R b);
data [] a
  = [] 
  | (:) (R a) (R [a]);
data R a
  = R a Trace;
data Trace
  = Ap Trace Traces SR
  | Nm Trace NmType SR
  | Ind Trace Trace
  | Root 
  | Sat Trace Trace
  | Pruned 
  | Hidden Trace;
data Traces
  = TNil 
  | TCons Trace Traces;
data NmType
  = NTInt Int
  | NTChar Char
  | NTInteger Integer
  | NTRational Ratio.Rational
  | NTFloat Float
  | NTDouble Double
  | NTId Int
  | NTConstr Int
  | NTTuple 
  | NTFun 
  | NTCase 
  | NTLambda 
  | NTDummy 
  | NTCString Int
  | NTIf 
  | NTGuard ;
class (Eq a,Show a) => Num a where {
  (-){-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R (Trace -> ((R a) -> (R a)))))))));
  (+){-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R (Trace -> ((R a) -> (R a)))))))));
  (*){-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R (Trace -> ((R a) -> (R a)))))))));
  negate{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R a))))));
  abs{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R a))))));
  signum{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R a))))));
  fromInteger{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R Integer) -> (R a))))));
};
class (Num a,Ord a) => Real a where {
  toRational{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R Ratio.Rational))))));
};
data (Integral a) => Ratio.Ratio a;
type {-# 1 #-} Ratio.Rational = (Ratio.Ratio Integer);
class (Real a,Enum a) => Integral a where {
  div{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R (Trace -> ((R a) -> (R a)))))))));
  mod{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R (Trace -> ((R a) -> (R a)))))))));
  quotRem{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R (Trace -> ((R a) -> (R (a,a))))))))));
  divMod{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R (Trace -> ((R a) -> (R (a,a))))))))));
  quot{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R (Trace -> ((R a) -> (R a)))))))));
  rem{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R (Trace -> ((R a) -> (R a)))))))));
  toInteger{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R a) -> (R Integer))))));
};
type {-# 1 #-} String = [Char];
type {-# 2 #-} ShowS = (Trace -> ((R String) -> (R String)));

{-# NEED Double #-}
data Double;

{-# NEED Float #-}
data Float;

{-# NEED {Ordering LT EQ GT} #-}
data Ordering
  = LT 
  | EQ 
  | GT ;

{-# NEED Integer #-}
data Integer;

{-# NEED Char #-}
data Char;

{-# NEED {SR SR SR2 SR3} #-}
data SR
  = SR 
  | SR2 Bool Int
  | SR3 Int;

{-# NEED Int #-}
data Int;

{-# NEED {Bool False True} #-}
data Bool
  = False 
  | True ;

{-# NEED (->) #-}
data (->) a b;
interface FFIBuiltin
{-# NEED StablePtr #-}
data StablePtr a;

{-# NEED Addr #-}
data Addr;

{-# NEED ForeignObj #-}
data ForeignObj;
interface ! IOExtras
{-# NEED unsafePerformIO #-}
unsafePerformIO{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R (Prelude.IO a)) -> (Prelude.R a))))));
interface Prelude
{-# NEED Vector #-}
data Vector a;
interface ! Prelude
{-# NEED _mkIOwf12 #-}
_mkIOwf12{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R IOError)))) -> (R (Trace -> ((R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> (R (Trace -> ((R g) -> (R (Trace -> ((R h) -> (R (Trace -> ((R i) -> (R (Trace -> ((R j) -> (R (Trace -> ((R k) -> (R (Trace -> ((R l) -> (R (Trace -> ((R m) -> (R (Either a n)))))))))))))))))))))))))))))))))))))) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> (R (Trace -> ((R g) -> (R (Trace -> ((R h) -> (R (Trace -> ((R i) -> (R (Trace -> ((R j) -> (R (Trace -> ((R k) -> (R (Trace -> ((R l) -> (R (Trace -> ((R m) -> (R (IO n))))))))))))))))))))))))))))))))))))))))))))));

{-# NEED _mkIOwf11 #-}
_mkIOwf11{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R IOError)))) -> (R (Trace -> ((R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> (R (Trace -> ((R g) -> (R (Trace -> ((R h) -> (R (Trace -> ((R i) -> (R (Trace -> ((R j) -> (R (Trace -> ((R k) -> (R (Trace -> ((R l) -> (R (Either a m))))))))))))))))))))))))))))))))))) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> (R (Trace -> ((R g) -> (R (Trace -> ((R h) -> (R (Trace -> ((R i) -> (R (Trace -> ((R j) -> (R (Trace -> ((R k) -> (R (Trace -> ((R l) -> (R (IO m)))))))))))))))))))))))))))))))))))))))))));

{-# NEED _mkIOwf10 #-}
_mkIOwf10{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R IOError)))) -> (R (Trace -> ((R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> (R (Trace -> ((R g) -> (R (Trace -> ((R h) -> (R (Trace -> ((R i) -> (R (Trace -> ((R j) -> (R (Trace -> ((R k) -> (R (Either a l)))))))))))))))))))))))))))))))) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> (R (Trace -> ((R g) -> (R (Trace -> ((R h) -> (R (Trace -> ((R i) -> (R (Trace -> ((R j) -> (R (Trace -> ((R k) -> (R (IO l))))))))))))))))))))))))))))))))))))))));

{-# NEED _mkIOwf9 #-}
_mkIOwf9{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R IOError)))) -> (R (Trace -> ((R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> (R (Trace -> ((R g) -> (R (Trace -> ((R h) -> (R (Trace -> ((R i) -> (R (Trace -> ((R j) -> (R (Either a k))))))))))))))))))))))))))))) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> (R (Trace -> ((R g) -> (R (Trace -> ((R h) -> (R (Trace -> ((R i) -> (R (Trace -> ((R j) -> (R (IO k)))))))))))))))))))))))))))))))))))));

{-# NEED _mkIOwf8 #-}
_mkIOwf8{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R IOError)))) -> (R (Trace -> ((R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> (R (Trace -> ((R g) -> (R (Trace -> ((R h) -> (R (Trace -> ((R i) -> (R (Either a j)))))))))))))))))))))))))) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> (R (Trace -> ((R g) -> (R (Trace -> ((R h) -> (R (Trace -> ((R i) -> (R (IO j))))))))))))))))))))))))))))))))));

{-# NEED _mkIOwf7 #-}
_mkIOwf7{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R IOError)))) -> (R (Trace -> ((R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> (R (Trace -> ((R g) -> (R (Trace -> ((R h) -> (R (Either a i))))))))))))))))))))))) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> (R (Trace -> ((R g) -> (R (Trace -> ((R h) -> (R (IO i)))))))))))))))))))))))))))))));

{-# NEED _mkIOwf6 #-}
_mkIOwf6{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R IOError)))) -> (R (Trace -> ((R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> (R (Trace -> ((R g) -> (R (Either a h)))))))))))))))))))) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> (R (Trace -> ((R g) -> (R (IO h))))))))))))))))))))))))))));

{-# NEED _mkIOwf5 #-}
_mkIOwf5{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R IOError)))) -> (R (Trace -> ((R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> (R (Either a g))))))))))))))))) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> (R (IO g)))))))))))))))))))))))));

{-# NEED _mkIOwf4 #-}
_mkIOwf4{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R IOError)))) -> (R (Trace -> ((R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Either a f)))))))))))))) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (IO f))))))))))))))))))))));

{-# NEED _mkIOwf3 #-}
_mkIOwf3{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R IOError)))) -> (R (Trace -> ((R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Either a e))))))))))) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (IO e)))))))))))))))))));

{-# NEED _mkIOwf2 #-}
_mkIOwf2{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R IOError)))) -> (R (Trace -> ((R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Either a d)))))))) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (IO d))))))))))))))));

{-# NEED _mkIOwf1 #-}
_mkIOwf1{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R IOError)))) -> (R (Trace -> ((R (Trace -> ((R b) -> (R (Either a c))))) -> (R (Trace -> ((R b) -> (R (IO c)))))))))))));

{-# NEED _mkIOwf0 #-}
_mkIOwf0{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R IOError)))) -> (R (Trace -> ((R (Trace -> ((R ()) -> (R (Either a b))))) -> (R (IO b))))))))));

{-# NEED _mkIOok12 #-}
_mkIOok12{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> (R (Trace -> ((R g) -> (R (Trace -> ((R h) -> (R (Trace -> ((R i) -> (R (Trace -> ((R j) -> (R (Trace -> ((R k) -> (R (Trace -> ((R l) -> (R m))))))))))))))))))))))))))))))))))))) -> (R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> (R (Trace -> ((R g) -> (R (Trace -> ((R h) -> (R (Trace -> ((R i) -> (R (Trace -> ((R j) -> (R (Trace -> ((R k) -> (R (Trace -> ((R l) -> (R (IO m)))))))))))))))))))))))))))))))))))))))))));

{-# NEED _mkIOok11 #-}
_mkIOok11{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> (R (Trace -> ((R g) -> (R (Trace -> ((R h) -> (R (Trace -> ((R i) -> (R (Trace -> ((R j) -> (R (Trace -> ((R k) -> (R l)))))))))))))))))))))))))))))))))) -> (R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> (R (Trace -> ((R g) -> (R (Trace -> ((R h) -> (R (Trace -> ((R i) -> (R (Trace -> ((R j) -> (R (Trace -> ((R k) -> (R (IO l))))))))))))))))))))))))))))))))))))))));

{-# NEED _mkIOok10 #-}
_mkIOok10{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> (R (Trace -> ((R g) -> (R (Trace -> ((R h) -> (R (Trace -> ((R i) -> (R (Trace -> ((R j) -> (R k))))))))))))))))))))))))))))))) -> (R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> (R (Trace -> ((R g) -> (R (Trace -> ((R h) -> (R (Trace -> ((R i) -> (R (Trace -> ((R j) -> (R (IO k)))))))))))))))))))))))))))))))))))));

{-# NEED _mkIOok9 #-}
_mkIOok9{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> (R (Trace -> ((R g) -> (R (Trace -> ((R h) -> (R (Trace -> ((R i) -> (R j)))))))))))))))))))))))))))) -> (R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> (R (Trace -> ((R g) -> (R (Trace -> ((R h) -> (R (Trace -> ((R i) -> (R (IO j))))))))))))))))))))))))))))))))));

{-# NEED _mkIOok8 #-}
_mkIOok8{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> (R (Trace -> ((R g) -> (R (Trace -> ((R h) -> (R i))))))))))))))))))))))))) -> (R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> (R (Trace -> ((R g) -> (R (Trace -> ((R h) -> (R (IO i)))))))))))))))))))))))))))))));

{-# NEED _mkIOok7 #-}
_mkIOok7{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> (R (Trace -> ((R g) -> (R h)))))))))))))))))))))) -> (R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> (R (Trace -> ((R g) -> (R (IO h))))))))))))))))))))))))))));

{-# NEED _mkIOok6 #-}
_mkIOok6{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> (R g))))))))))))))))))) -> (R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (Trace -> ((R f) -> (R (IO g)))))))))))))))))))))))));

{-# NEED _mkIOok5 #-}
_mkIOok5{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R f)))))))))))))))) -> (R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (Trace -> ((R e) -> (R (IO f))))))))))))))))))))));

{-# NEED _mkIOok4 #-}
_mkIOok4{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R e))))))))))))) -> (R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (Trace -> ((R d) -> (R (IO e)))))))))))))))))));

{-# NEED _mkIOok3 #-}
_mkIOok3{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R d)))))))))) -> (R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (Trace -> ((R c) -> (R (IO d))))))))))))))));

{-# NEED _mkIOok2 #-}
_mkIOok2{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R c))))))) -> (R (Trace -> ((R a) -> (R (Trace -> ((R b) -> (R (IO c)))))))))))));

{-# NEED _mkIOok1 #-}
_mkIOok1{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R a) -> (R b)))) -> (R (Trace -> ((R a) -> (R (IO b))))))))));

{-# NEED _mkIOok0 #-}
_mkIOok0{-# 2 #-}::(SR -> (Trace -> (R (Trace -> ((R (Trace -> ((R ()) -> (R a)))) -> (R (IO a)))))));
}
