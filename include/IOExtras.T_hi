interface IOExtras where {

{-# NEED #-}
instance Prelude.NmCoerce FFIBuiltin.ForeignObj;

{-# NEED #-}
instance Prelude.NmCoerce (FFIBuiltin.StablePtr a);

{-# NEED #-}
instance Prelude.NmCoerce PackedString.PackedString;

{-# NEED #-}
instance Prelude.NmCoerce FFIBuiltin.Addr;

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Fractional (Ratio.Ratio a);

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Real (Ratio.Ratio a);

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Num (Ratio.Ratio a);

{-# NEED #-}
instance Prelude.Enum FFIBuiltin.Addr;

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Enum (Ratio.Ratio a);

{-# NEED #-}
instance Prelude.Ord PackedString.PackedString;

{-# NEED #-}
instance Prelude.Ord FFIBuiltin.Addr;

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Ord (Ratio.Ratio a);

{-# NEED #-}
instance Prelude.Read PackedString.PackedString;

{-# NEED #-}
instance (Prelude.Read a,Prelude.Integral a) => Prelude.Read (Ratio.Ratio a);

{-# NEED #-}
instance Prelude.Eq PackedString.PackedString;

{-# NEED #-}
instance Prelude.Eq FFIBuiltin.Addr;

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Eq (Ratio.Ratio a);

{-# NEED #-}
instance Prelude.Show PackedString.PackedString;

{-# NEED #-}
instance Prelude.Show FFIBuiltin.Addr;

{-# NEED #-}
instance (Prelude.Integral a) => Prelude.Show (Ratio.Ratio a);
interface FFIBuiltin
{-# NEED ForeignObj #-}
data ForeignObj;

{-# NEED StablePtr #-}
data StablePtr a;
interface PackedString
{-# NEED PackedString #-}
data PackedString;
interface FFIBuiltin
{-# NEED Addr #-}
data Addr;
interface ! IOExtras
{-# NEED unsafeInterleaveIO #-}
unsafeInterleaveIO{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R (Prelude.IO a)) -> (Prelude.R (Prelude.IO a)))))));

{-# NEED newIOArray #-}
newIOArray{-# 2 #-}::(Prelude.Ix a) => (Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R (a,a)) -> (Prelude.R (Prelude.Trace -> ((Prelude.R b) -> (Prelude.R (Prelude.IO (IOArray a b)))))))))));

{-# NEED boundsIOArray #-}
boundsIOArray{-# 2 #-}::(Prelude.Ix a) => (Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R (IOArray a b)) -> (Prelude.R (a,a)))))));

{-# NEED freezeIOArray #-}
freezeIOArray{-# 2 #-}::(Prelude.Ix a) => (Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R (IOArray a b)) -> (Prelude.R (Prelude.IO (Array.Array a b))))))));
interface Array
{-# NEED Array #-}
data (Prelude.Ix a) => Array a b;
interface ! IOExtras
{-# NEED writeIOArray #-}
writeIOArray{-# 2 #-}::(Prelude.Ix a) => (Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R (IOArray a b)) -> (Prelude.R (Prelude.Trace -> ((Prelude.R a) -> (Prelude.R (Prelude.Trace -> ((Prelude.R b) -> (Prelude.R (Prelude.IO ())))))))))))));

{-# NEED readIOArray #-}
readIOArray{-# 2 #-}::(Prelude.Ix a) => (Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R (IOArray a b)) -> (Prelude.R (Prelude.Trace -> ((Prelude.R a) -> (Prelude.R (Prelude.IO b))))))))));

{-# NEED unsafePtrEq #-}
unsafePtrEq{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R a) -> (Prelude.R (Prelude.Trace -> ((Prelude.R a) -> (Prelude.R Prelude.Bool)))))))));

{-# NEED newIORef #-}
newIORef{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R a) -> (Prelude.R (Prelude.IO (IORef a))))))));

{-# NEED writeIORef #-}
writeIORef{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R (IORef a)) -> (Prelude.R (Prelude.Trace -> ((Prelude.R a) -> (Prelude.R (Prelude.IO ()))))))))));

{-# NEED readIORef #-}
readIORef{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R (IORef a)) -> (Prelude.R (Prelude.IO a)))))));

{-# NEED IOArray #-}
data (Prelude.Ix a) => IOArray a b;

{-# NEED IORef #-}
newtype {-#  #-} IORef a;
interface ! NonStdTrace
{-# NEED trace #-}
trace{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R Prelude.String) -> (Prelude.R (Prelude.Trace -> ((Prelude.R a) -> (Prelude.R a)))))))));
interface ! IOExtras
{-# NEED fixIO #-}
fixIO{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R (Prelude.Trace -> ((Prelude.R a) -> (Prelude.R (Prelude.IO a))))) -> (Prelude.R (Prelude.IO a)))))));

{-# NEED unsafePerformIO #-}
unsafePerformIO{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.Trace -> ((Prelude.R (Prelude.IO a)) -> (Prelude.R a))))));

{-# NEED performGC #-}
performGC{-# 2 #-}::(Prelude.SR -> (Prelude.Trace -> (Prelude.R (Prelude.IO ()))));
interface Ratio
{-# NEED Rational #-}
type {-# 1 #-} Rational = (Ratio.Ratio Prelude.Integer);

{-# NEED Ratio #-}
data (Prelude.Integral a) => Ratio a;
}
