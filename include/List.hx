module List
(Var "\\\\",Has{args=0,fixity=None,priority=5,letBound=True})
(Var "delete",Has{args=0,fixity=Def,priority=9,letBound=True})
(Var "deleteBy",Has{args=3,fixity=Def,priority=9,letBound=True})
(Var "deleteFirsts",Has{args=0,fixity=Def,priority=9,letBound=True})
(Var "deleteFirstsBy",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "elemBy",Has{args=3,fixity=Def,priority=9,letBound=True})
(Var "elemIndex",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "elemIndexBy",Has{args=3,fixity=Def,priority=9,letBound=True})
(Var "elemIndices",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "find",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "findIndex",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "findIndices",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "genericDrop",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "genericIndex",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "genericLength",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "genericReplicate",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "genericSplitAt",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "genericTake",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "group",Has{args=0,fixity=Def,priority=9,letBound=True})
(Var "groupBy",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "inits",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "insert",Has{args=0,fixity=Def,priority=9,letBound=True})
(Var "insertBy",Has{args=3,fixity=Def,priority=9,letBound=True})
(Var "intersect",Has{args=0,fixity=Def,priority=9,letBound=True})
(Var "intersectBy",Has{args=3,fixity=Def,priority=9,letBound=True})
(Var "intersperse",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "isPrefixOf",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "isSuffixOf",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "lookupBy",Has{args=3,fixity=Def,priority=9,letBound=True})
(Var "mapAccumL",Has{args=3,fixity=Def,priority=9,letBound=True})
(Var "mapAccumR",Has{args=3,fixity=Def,priority=9,letBound=True})
(Var "maximumBy",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "minimumBy",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "notElemBy",Has{args=3,fixity=Def,priority=9,letBound=True})
(Var "nub",Has{args=0,fixity=Def,priority=9,letBound=True})
(Var "nubBy",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "partition",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "permutations",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "products",Has{args=0,fixity=Def,priority=9,letBound=True})
(Var "sort",Has{args=0,fixity=Def,priority=9,letBound=True})
(Var "sortBy",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "subsequences",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "sums",Has{args=0,fixity=Def,priority=9,letBound=True})
(Var "tails",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "transpose",Has{args=1,fixity=Def,priority=9,letBound=True})
(Var "unfoldr",Has{args=2,fixity=Def,priority=9,letBound=True})
(Var "union",Has{args=0,fixity=Def,priority=9,letBound=True})
(Var "unionBy",Has{args=3,fixity=Def,priority=9,letBound=True})
(Var "unzip4",Has{args=0,fixity=Def,priority=9,letBound=True})
(Var "unzip5",Has{args=0,fixity=Def,priority=9,letBound=True})
(Var "unzip6",Has{args=0,fixity=Def,priority=9,letBound=True})
(Var "unzip7",Has{args=0,fixity=Def,priority=9,letBound=True})
(Var "zip4",Has{args=0,fixity=Def,priority=9,letBound=True})
(Var "zip5",Has{args=0,fixity=Def,priority=9,letBound=True})
(Var "zip6",Has{args=0,fixity=Def,priority=9,letBound=True})
(Var "zip7",Has{args=0,fixity=Def,priority=9,letBound=True})
(Var "zipWith4",Has{args=5,fixity=Def,priority=9,letBound=True})
(Var "zipWith5",Has{args=6,fixity=Def,priority=9,letBound=True})
(Var "zipWith6",Has{args=7,fixity=Def,priority=9,letBound=True})
(Var "zipWith7",Has{args=8,fixity=Def,priority=9,letBound=True})
