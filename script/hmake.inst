#!/bin/sh
# hmake - make for Haskell programs
# Original Author: Thomas Hallgren, hallgren@cs.chalmers.se
# hacked by Niklas Röjemo, rojemo@cs.chalmers.se
# Current Author: Malcolm Wallace, 1998-1999, Malcolm.Wallace@cs.york.ac.uk 

SCRIPTDIR=${SCRIPTDIR-ScriptDir}
MACHINE=${MACHINE-"`$SCRIPTDIR/harch`"}
HMAKEDIR=${HMAKEDIR-ExecutableDir}
TMP=${TMP-/tmp}

MKPROG=${MKPROG-$HMAKEDIR/$MACHINE/MkProg}
OLDER=${OLDER-$HMAKEDIR/$MACHINE/Older}

if [ ! -d $HMAKEDIR/$MACHINE ]
then
  echo "`basename $0` is not installed/configured for $MACHINE."
  echo "  See your system administrator, or install it yourself from"
  echo "  http://www.cs.york.ac.uk/fp/hmake/"
  exit 1
fi

# Some important configuration:
# First try user's home directory, then machine-specific config, then
# installation-wide config.  At least one of these must exist!
if [ -f $HOME/.hmakerc ]
then . $HOME/.hmakerc
else
  if [ -f $HMAKEDIR/$MACHINE/hmake.config ]
  then . $HMAKEDIR/$MACHINE/hmake.config
  else
    if [ -f $HMAKEDIR/hmake.config ]
    then . $HMAKEDIR/hmake.config
    else echo "hmake: Important configuration file is missing!"; exit 1
    fi
  fi
fi

# Now let's get started.

exec="sh -e"
modules=""
flags=""	# compiler + hmake flags
hmflags=""	# hmake flags only
hcflags=""	# compiler flags only
ctflags=""	# protected compiler flags
rtflags=""	# protected compiler run-time flags
hmrtflags=""	# hmake run-time flags


# Also assume compiler/linker flags from the environment
#  HFLAGS, LDFLAGS, CPPFLAGS

while [ "$1" != "" ]
do
  case $1 in
    --version) echo "$0: $INSTALLVER"
               exit 0;;

    # Flags to hmake itself
    -clean)        hmflags=$hmflags" $1" ;;
    -realclean)    hmflags=$hmflags" $1" ;;
    -keepPrelude)  hmflags=$hmflags" $1" ;;
    -n)  hmflags=$hmflags" -q"; exec=cat ;;
    -q)  hmflags=$hmflags" $1" ;;
    -N*) hmflags=$hmflags" $1" ;;
    -g)  hmflags=$hmflags" $1"; exec=cat ;;
    -M*) hmflags=$hmflags" $1"; exec=cat ;;
    -d)  shift; objdir=$1; hmflags=$hmflags" -d$1" ;;
    -d*) objdir=`echo $1 | cut -c3-`; hmflags=$hmflags" $1" ;;
    # $COMPILERS) COMP=`echo $1 | cut -c2-` ;;	-- doesn't work correctly
    -hbc)   COMP=hbc ;;
    -ghc)   COMP=ghc ;;
    -nhc98) COMP=nhc98 ;;
    -nhc13) COMP=nhc13 ;;
    -xtc)   COMP=xtc ;;
    -HC=*)  COMP=`echo $1 | cut -c5-` ;;
    -HC)    shift ; COMP=$1 ;;

    # Run-time flags to hmake itself
    +RTS) shift
          while [ "$1" != "-RTS" ]
          do hmrtflags=$hmrtflags" $1"
             shift
          done ;;

    # Run-time flags to the compiler
    -A*)  rtflags=$rtflags" $1" ;;
    -H*)  rtflags=$rtflags" $1" ;;
    -h*)  rtflags=$rtflags" $1" ;;
    -B*)  rtflags=$rtflags" $1" ;;
    -S*)  rtflags=$rtflags" $1" ;;
    -V*)  rtflags=$rtflags" $1" ;;
    -K*)  rtflags=$rtflags" $1" ;;
   #-gc*) rtflags=$rtflags" $1" ;;	-- not used by nhc98 - used by hbc?

    # Protected compiler flags
    +CTS) shift
          while [ "$1" != "-CTS" ]
          do ctflags=$ctflags" $1"
             shift
          done ;;

    # Cpp + import flags (copied to haskell compiler also)
    -I*) CPPFLAGS=$CPPFLAGS" $1";  flags=$flags" $1" ;;
    -i*) CPPFLAGS=$CPPFLAGS" $1";  flags=$flags" $1" ;;
    -D*) CPPFLAGS=$CPPFLAGS" $1";  hmflags=$hmflags" $1" ;;
    -P*)                           flags=$flags" $1" ;;

    # Link flags
    -L*) LDFLAGS=$LDFLAGS" $1" ;;
    -l*) LDFLAGS=$LDFLAGS" $1" ;;

    # Any other compiler flags
    -*) hcflags=$hcflags" $1" ;;

    # Objects and archives for linking
    *.o) LDFLAGS=$LDFLAGS" $1" ;;
    *.a) LDFLAGS=$LDFLAGS" $1" ;;

    # Anything else must be a module name
    *) modules=$modules" $1" ;;

  esac
  shift
done

if [ "$modules" = "" ]
then
  echo 'Usage: hmake [compiler] [options] (module|program)* [object...]'
  echo '       compiler     choose -ghc, -hbc, or -nhc98'
  echo '       --version    show version information and quit'
  echo '       -q           quiet (do not echo commands)'
  echo '       -n           noexec (echo but do not execute commands)'
  echo '       -g           show graph of dependencies (implies noexec)'
  echo '       -M           show Makefile format dependencies'
  echo '       -Md          show Makefile format dependencies, wrt -d option'
  echo '       -dobjdir     use objdir for object files'
  echo '       -clean       just remove all relevant .o files'
  echo '       -realclean   just remove all relevant .o and .hi files'
  echo '       -*           other options are passed through to the compiler'
  echo '       module       modules (.hs, .lhs, .gc) are compiled'
  echo '       program      programs are compiled and linked'
  echo '       object       objects (.o, .a) are linked into a program only'
  exit 1
fi

compilerstyle $COMP	# Use config to select compiler-specific options.

case $KNOWN in
  no) echo "hmake: Sorry, I do not know about your installation of $COMP"
      exit 1 ;;
  yes) ;;
esac
case $RTSOPTIONSTYLE in
  rts)     if [ "$rtflags" != "" ]
           then rtflags=" +RTS$rtflags -RTS"
           fi ;;
  minus)   rtflags="$rtflags -" ;;
  none)    ;;
esac
case $CTSOPTIONSTYLE in
  cts)     if [ "$ctflags" != "" ]
           then ctflags=" +CTS$ctflags -CTS"
           fi ;;
esac
case $OD in
  -od) if [ "$objdir" != "" ]
       then #hcflags=$hcflags" -d $objdir"
            hmflags="$hmflags $OD"
       fi
esac
case $USINGRTS in
  minus) hmrtflags="$hmrtflags -" ;;
  rts)   hmrtflags="+RTS $hmrtflags -RTS" ;;
esac

if which $COMP >/dev/null 2>&1
then HC="$COMP"
else HC="$SCRIPTDIR/$COMP"	# quick hack to enable in-place builds
fi
hmflags="$hmflags $PRELUDEPATH $CPPSYMBOLS"
hcflags="$hcflags $EXTRACOMPILERFLAGS"
HFLAGS="$rtflags$ctflags$hcflags$flags $HFLAGS"

export HC HFLAGS OLDER LDFLAGS	# MkProg expects these variables to be set.
export CPPFLAGS			# cpp usually expects this variable.
export MACHINE			# nhc98 script is faster if this is set.

# Here we go...
$MKPROG $hmrtflags $hmflags $flags $modules >$TMP/hmake$$
CODE=$?
case $CODE in
  0) $exec <$TMP/hmake$$
     CODE=$?
     rm $TMP/hmake$$
     exit $CODE ;;
  *) rm $TMP/hmake$$
     echo "Stop - hmake dependency error."
     exit $CODE ;;
esac
